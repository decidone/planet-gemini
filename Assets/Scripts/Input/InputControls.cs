//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""MainCamera"",
            ""id"": ""9b28ec48-def5-4f4a-8a60-0032b1aa50d4"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7623d1a4-7a76-44b0-a2ab-45a6d3795ad0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""02873271-613f-4961-9680-b4ae49e212e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseButtonUp"",
                    ""type"": ""Button"",
                    ""id"": ""357aa058-b1c8-428e-b74f-b5a4c4194361"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""730142c6-cd25-4a1e-8c11-79feef3c0a09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseButtonUp"",
                    ""type"": ""Button"",
                    ""id"": ""3724448e-0014-4f65-b433-1bc1d2896d9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1198663-4583-4dfc-baeb-b14b3010325a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59a04677-4e55-4605-a772-dcacd7e55a5e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f5126c3-041d-45c3-bf3f-c50e94e5f66b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""810c3c34-7d90-4810-a0c6-e0e388fe8b3d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3017406b-2f30-434b-b0c0-230d06f0c6cb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightMouseButtonUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapCamera"",
            ""id"": ""c7e04b48-94a0-475d-976c-a48ced853672"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ecface99-8aab-4b33-95f6-ef9dd73dd416"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1f4c0166-19d2-4dad-8788-ed4ed7e4e33a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""81edef1b-bf46-45ff-a415-0afd027851c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""186a3b88-39f6-41ba-afb0-03e1f990af92"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""478e4246-59d9-490b-bc91-3349fc72be15"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ac7b1840-781a-42c5-a465-d2305a125969"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1eb9ab47-50f5-49d4-8e26-378e2f7db692"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""faa526d9-c403-45c7-b964-d3808055002a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""34d0c799-eb20-4408-8960-568d0fd30819"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fd67025e-13f1-45dc-988e-e7e3b444a43e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""046a5523-3032-48c2-893d-6507dd2800d8"",
            ""actions"": [
                {
                    ""name"": ""LeftMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""93fc001f-7297-4a90-9b44-035b56fa45fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseButtonUp"",
                    ""type"": ""Button"",
                    ""id"": ""8e60e949-0512-4641-a108-20fe737bf8df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""b9b8670f-6000-4c4a-998f-5cad6054ab14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""0cc79e69-5c0d-4387-bf26-2bad487637eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2057eb2a-f3b4-4d5b-b12e-c324640535b8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f974adc-867b-4a20-956f-a3facb74b59b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71515b7a-b64f-4ed8-b82a-bb479278efb7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f9d9ecd-1dbb-4b00-8703-08f7c2b58301"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""a2754b26-8fe1-4f5f-87ba-cc86b9bfdfd4"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bef394ae-2f70-4783-aba3-9d4fe8d8616e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Loot"",
                    ""type"": ""Button"",
                    ""id"": ""550e0b53-e7fa-41f3-bc64-28ef132b3a67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""b184b0b1-98f6-4769-8eb8-80bba2e7a09f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""3f5ab9d8-2735-499a-bf5b-16541617d2f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Market"",
                    ""type"": ""Button"",
                    ""id"": ""8f6c7167-9150-45b4-93fe-c50074e8de95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""01efdc58-bb1d-4a04-9124-28aa8069fb31"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""13d68cef-9ce1-4f74-901b-638e30a32abc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e68c4e1f-6a3e-4db1-8e92-c44b94699108"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b29d5a30-284a-4a05-aac7-f35da731588e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f015a196-780a-436a-8aa4-a9cd83fd9ce6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dceab05a-76ff-4260-a48c-26c8c3d3a400"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc26588a-78f3-4114-8c30-b42cc4bc8a00"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Loot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""008efee7-f805-40e9-8824-6c15e1214839"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44f54028-f4ff-479b-9b02-1c77a8dfbf3b"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Market"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Unit"",
            ""id"": ""1ff26e3a-a6af-4a87-89ef-dd3fb429f05f"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""edee8a39-cded-4377-bdae-fa751373f8a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Patrol"",
                    ""type"": ""Button"",
                    ""id"": ""b5052db8-a1a6-4591-90e5-cbd6ee385c76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""b1d0fc87-5c86-4ce0-9c4f-e1221eff88be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""378ea5ce-3b52-419a-96ce-ad15ef981a45"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b5292bf-4e4e-410c-8e2f-850fed5def7a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Patrol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1717916a-4f75-43ee-9035-8f7fd552d29b"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Structure"",
            ""id"": ""c25aab9e-6aef-42c2-8172-9858d90f214d"",
            ""actions"": [
                {
                    ""name"": ""StrClick"",
                    ""type"": ""Button"",
                    ""id"": ""468cfed4-804d-4468-b28e-c08f5feedcc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""478e2d11-b9b3-4bcc-9e3a-a29d5b5e2930"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""StrClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""205f9662-adbc-4110-8179-f504f29be192"",
            ""actions"": [
                {
                    ""name"": ""PlayerInven"",
                    ""type"": ""Button"",
                    ""id"": ""5b2576a3-eafd-4421-8f2a-59a21f0e81f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemSpawner"",
                    ""type"": ""Button"",
                    ""id"": ""8f8924c4-d6a3-4160-a00d-5c521c008d0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuildingInven"",
                    ""type"": ""Button"",
                    ""id"": ""0eed8e9b-4e7f-48b6-9c23-f7f238d5a27f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SplitterFilter"",
                    ""type"": ""Button"",
                    ""id"": ""f9d51da5-cb26-4fa1-b981-6debef4908a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recipe"",
                    ""type"": ""Button"",
                    ""id"": ""05362b0e-82de-413e-9d52-d9576116c676"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""b34e0754-005a-4379-a287-75acff3245e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotRightClickHold"",
                    ""type"": ""Button"",
                    ""id"": ""e875a3d9-d19b-48cf-a8c6-59438caa92ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""607817bf-08ea-44f6-8c9d-51e3daae2712"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PlayerInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30662629-be72-4c8b-9547-291f91b444c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ItemSpawner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3488d781-49af-4ba3-a1c4-80d288567ef7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""BuildingInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0efb9578-6793-43f1-99a7-b67ac8ad1328"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SplitterFilter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cab868a5-cf13-490b-8e3c-a36c834f6100"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Recipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cfc30c8-2651-43dd-abc5-9f6d5be60972"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SlotLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7156d74-9125-41e3-9c3f-6252e0fc9d76"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SlotRightClickHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HotKey"",
            ""id"": ""51e334b0-de82-4a91-b786-f68e2d53ba6a"",
            ""actions"": [
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""a6cb2400-8aa4-4172-8228-81f0969d277f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Supply"",
                    ""type"": ""Button"",
                    ""id"": ""5716835f-ae40-458e-adab-563ea6d5a69d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""0921331f-fac7-46e5-b133-4d8280320b8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Building"",
                    ""type"": ""Button"",
                    ""id"": ""71f7ce3e-c629-4dd5-a5d3-98cc0dfd5c3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScienceTree"",
                    ""type"": ""Button"",
                    ""id"": ""b35d603e-71a6-4e26-9123-d943e7bb5641"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnergyCheck"",
                    ""type"": ""Button"",
                    ""id"": ""3b290ded-a785-4591-9401-85ea4bd564b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""14a8d2a1-4421-4b00-a300-c98f307057c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""8acb3191-cee1-444a-a9fb-00ef45eab866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Overall"",
                    ""type"": ""Button"",
                    ""id"": ""b6f12cc3-4e90-45b3-8a33-29fe864a060e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""85bbca10-647d-49bd-9d1b-7676d4064648"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""993a7ceb-ca24-4d47-8c35-d3748d9c3bc0"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Supply"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ae25ffc-4bd9-4b3f-8a8a-2c4c5c179150"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11339cfa-e0bb-4a37-9a8b-f1a8787ae8d9"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Building"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b947f9a2-f3f1-4f13-af53-0aa5e256f6f4"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScienceTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d1ecdea-1a9d-4b62-96d1-b0ea2ed1d0d6"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""EnergyCheck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91344c68-8d1e-4360-a0cc-926154d4031d"",
                    ""path"": ""<Keyboard>/comma"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caad1b1a-8e49-47a8-945b-f8b1428b9d06"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc06ff96-9bc8-4a0e-a1fd-92f8e9667bf9"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Overall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hold"",
            ""id"": ""79f4d7cb-6226-48af-9791-91e0bbb68927"",
            ""actions"": [
                {
                    ""name"": ""Ctrl"",
                    ""type"": ""Button"",
                    ""id"": ""5459cd3e-18a4-4cc2-94fa-5e331ba856c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""bc63a25e-a3de-4fd7-a958-7bc5dba409e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt"",
                    ""type"": ""Button"",
                    ""id"": ""fcfcaa82-b8a8-47f9-b7c7-d177ac1eab21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ae194fab-828d-4964-a278-8464699ccbe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRight"",
                    ""type"": ""Button"",
                    ""id"": ""33cbeb75-a63a-4c31-8ed2-f9627c898744"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4fb41eee-f32e-4b9d-8495-66bd0007b7f3"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Ctrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d64ae89-9ed7-4faa-8aaa-d7bf48b64b71"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea8d7275-24e0-4c5e-8e5b-a89e954186e5"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Alt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""febbaa78-4f77-455d-a803-47b68124fd98"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74ce0754-9495-4646-bd54-ce7521794a48"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""State"",
            ""id"": ""5e883f74-3828-46bb-a4ed-62b9380cf114"",
            ""actions"": [
                {
                    ""name"": ""ToggleMap"",
                    ""type"": ""Button"",
                    ""id"": ""8b4643aa-c69c-4608-87d1-4643d58b5d44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35c133e4-8ee3-47c3-ac08-ac810d8cb6f5"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ToggleMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""9872ce8c-9647-46b9-9689-ce7ca720073c"",
            ""actions"": [
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""749bec82-70d2-4e90-a7f4-ef427028cbd2"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e221dff2-57a2-4415-9147-ff337049e8eb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""923e1dd9-6915-47d5-a446-6a9c3b6da86c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c59bdcd6-a420-453d-aedf-09ddf22378e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""43338873-c217-479c-bebf-414b65481e85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d8612575-ff56-4972-9fcf-75da426a3be3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b18a59f-5034-4fb1-b770-aa24b98da756"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""e928bf58-8fe2-41bc-9a63-b0f4158d6d63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""3e0e3989-6b2f-418c-99c5-5a2342a55b7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6bd92c2a-5e26-4b0a-aeff-2c17636e3b3e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""f0fbbaaf-6c2f-4c39-adc0-a204341a7058"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7a07e06d-1243-4a2d-9687-228f81776d8b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c96d81fd-951d-44ce-a7c3-0b916401237c"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3041602f-65c9-4e8e-9d9e-ce25e137ec26"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd632bed-ad5f-4bbf-a343-3b5c944c7ee3"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a95e1cd9-00f2-419c-ac1a-59b3d08407d9"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c8d824e2-5489-47f6-9a67-4d1932dfa0cd"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ebfae3d8-7495-4aeb-a80a-7950639a948f"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""949dc441-acfb-42b5-a6c2-1d81dcfe1c8a"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""83e732d8-2b59-4222-bcb2-caee57cd2ec6"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""f49b84e0-8da8-457b-ac2d-30abbe0dde9d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""841845e9-dec0-419b-a20c-da45204ec33f"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d18a7ad1-6018-44af-84d3-e97a9244534d"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3c0f29d1-455c-4393-ab4d-c6c17d4abb1d"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2092f8de-6954-4cfc-a758-d4c9556b9666"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""e69049c9-3e4c-43e2-b631-ecb301eb5a44"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""55917586-3f4b-4b6b-9ea2-36d83b772f21"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7e7342b2-7d42-4faf-8e26-0886311c8bbe"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c7a4e59f-b289-4030-bf86-20af3c7b9764"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9234dbb5-6b7b-4e60-b689-93d11d2633d9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b5db7fd-550d-452e-91ef-3d20566a1cb0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bf5c2a88-f786-4c82-a61d-96066b7e72eb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ca4d6d47-e76f-436a-9f46-5ae4fd51f61d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b599fb5c-4c7f-4e7d-866f-9ce7fa3d35b7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a4be7e2-e541-423f-ab45-b5b78856d0e5"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ec34724-309d-40b8-bec3-db9220fb5462"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7238afa7-134b-4359-87a5-698f3bcd6a22"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27e363a6-2974-42f0-b6dc-a008174ef058"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a03e643a-954a-4678-962c-e32bef79b582"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58fe26e4-37ea-480d-8a85-7f7489a64639"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""929b8a11-faaf-4168-8140-357b70204b4c"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8200953-c24d-4a2a-84b0-bd6304426b13"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24308588-1beb-44e6-a903-f5bb71bfdca0"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36bd3a2f-a95f-49d5-a2d5-5989158a453c"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28bc6785-7651-42bc-8871-569edf7275a6"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57d55aea-c1b3-4d9d-a13d-f54f5a5e1b55"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d095b52a-011b-4a33-bd91-72660eb180cc"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""TrackedDevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af069dc5-7147-43bd-a3d5-34bb2442aeb1"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""TrackedDeviceOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainCamera
        m_MainCamera = asset.FindActionMap("MainCamera", throwIfNotFound: true);
        m_MainCamera_Zoom = m_MainCamera.FindAction("Zoom", throwIfNotFound: true);
        m_MainCamera_LeftMouseButtonDown = m_MainCamera.FindAction("LeftMouseButtonDown", throwIfNotFound: true);
        m_MainCamera_LeftMouseButtonUp = m_MainCamera.FindAction("LeftMouseButtonUp", throwIfNotFound: true);
        m_MainCamera_RightMouseButtonDown = m_MainCamera.FindAction("RightMouseButtonDown", throwIfNotFound: true);
        m_MainCamera_RightMouseButtonUp = m_MainCamera.FindAction("RightMouseButtonUp", throwIfNotFound: true);
        // MapCamera
        m_MapCamera = asset.FindActionMap("MapCamera", throwIfNotFound: true);
        m_MapCamera_Zoom = m_MapCamera.FindAction("Zoom", throwIfNotFound: true);
        m_MapCamera_Movement = m_MapCamera.FindAction("Movement", throwIfNotFound: true);
        m_MapCamera_LeftClick = m_MapCamera.FindAction("LeftClick", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_LeftMouseButtonDown = m_Building.FindAction("LeftMouseButtonDown", throwIfNotFound: true);
        m_Building_LeftMouseButtonUp = m_Building.FindAction("LeftMouseButtonUp", throwIfNotFound: true);
        m_Building_RightMouseButtonDown = m_Building.FindAction("RightMouseButtonDown", throwIfNotFound: true);
        m_Building_Rotate = m_Building.FindAction("Rotate", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Loot = m_Player.FindAction("Loot", throwIfNotFound: true);
        m_Player_RightClick = m_Player.FindAction("RightClick", throwIfNotFound: true);
        m_Player_Interaction = m_Player.FindAction("Interaction", throwIfNotFound: true);
        m_Player_Market = m_Player.FindAction("Market", throwIfNotFound: true);
        // Unit
        m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
        m_Unit_Attack = m_Unit.FindAction("Attack", throwIfNotFound: true);
        m_Unit_Patrol = m_Unit.FindAction("Patrol", throwIfNotFound: true);
        m_Unit_Hold = m_Unit.FindAction("Hold", throwIfNotFound: true);
        // Structure
        m_Structure = asset.FindActionMap("Structure", throwIfNotFound: true);
        m_Structure_StrClick = m_Structure.FindAction("StrClick", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_PlayerInven = m_Inventory.FindAction("PlayerInven", throwIfNotFound: true);
        m_Inventory_ItemSpawner = m_Inventory.FindAction("ItemSpawner", throwIfNotFound: true);
        m_Inventory_BuildingInven = m_Inventory.FindAction("BuildingInven", throwIfNotFound: true);
        m_Inventory_SplitterFilter = m_Inventory.FindAction("SplitterFilter", throwIfNotFound: true);
        m_Inventory_Recipe = m_Inventory.FindAction("Recipe", throwIfNotFound: true);
        m_Inventory_SlotLeftClick = m_Inventory.FindAction("SlotLeftClick", throwIfNotFound: true);
        m_Inventory_SlotRightClickHold = m_Inventory.FindAction("SlotRightClickHold", throwIfNotFound: true);
        // HotKey
        m_HotKey = asset.FindActionMap("HotKey", throwIfNotFound: true);
        m_HotKey_Debug = m_HotKey.FindAction("Debug", throwIfNotFound: true);
        m_HotKey_Supply = m_HotKey.FindAction("Supply", throwIfNotFound: true);
        m_HotKey_Escape = m_HotKey.FindAction("Escape", throwIfNotFound: true);
        m_HotKey_Building = m_HotKey.FindAction("Building", throwIfNotFound: true);
        m_HotKey_ScienceTree = m_HotKey.FindAction("ScienceTree", throwIfNotFound: true);
        m_HotKey_EnergyCheck = m_HotKey.FindAction("EnergyCheck", throwIfNotFound: true);
        m_HotKey_Save = m_HotKey.FindAction("Save", throwIfNotFound: true);
        m_HotKey_Load = m_HotKey.FindAction("Load", throwIfNotFound: true);
        m_HotKey_Overall = m_HotKey.FindAction("Overall", throwIfNotFound: true);
        // Hold
        m_Hold = asset.FindActionMap("Hold", throwIfNotFound: true);
        m_Hold_Ctrl = m_Hold.FindAction("Ctrl", throwIfNotFound: true);
        m_Hold_Shift = m_Hold.FindAction("Shift", throwIfNotFound: true);
        m_Hold_Alt = m_Hold.FindAction("Alt", throwIfNotFound: true);
        m_Hold_MouseLeft = m_Hold.FindAction("MouseLeft", throwIfNotFound: true);
        m_Hold_MouseRight = m_Hold.FindAction("MouseRight", throwIfNotFound: true);
        // State
        m_State = asset.FindActionMap("State", throwIfNotFound: true);
        m_State_ToggleMap = m_State.FindAction("ToggleMap", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_TrackedDeviceOrientation = m_UI.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
        m_UI_TrackedDevicePosition = m_UI.FindAction("TrackedDevicePosition", throwIfNotFound: true);
        m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
        m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
        m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainCamera
    private readonly InputActionMap m_MainCamera;
    private IMainCameraActions m_MainCameraActionsCallbackInterface;
    private readonly InputAction m_MainCamera_Zoom;
    private readonly InputAction m_MainCamera_LeftMouseButtonDown;
    private readonly InputAction m_MainCamera_LeftMouseButtonUp;
    private readonly InputAction m_MainCamera_RightMouseButtonDown;
    private readonly InputAction m_MainCamera_RightMouseButtonUp;
    public struct MainCameraActions
    {
        private @InputControls m_Wrapper;
        public MainCameraActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_MainCamera_Zoom;
        public InputAction @LeftMouseButtonDown => m_Wrapper.m_MainCamera_LeftMouseButtonDown;
        public InputAction @LeftMouseButtonUp => m_Wrapper.m_MainCamera_LeftMouseButtonUp;
        public InputAction @RightMouseButtonDown => m_Wrapper.m_MainCamera_RightMouseButtonDown;
        public InputAction @RightMouseButtonUp => m_Wrapper.m_MainCamera_RightMouseButtonUp;
        public InputActionMap Get() { return m_Wrapper.m_MainCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainCameraActions set) { return set.Get(); }
        public void SetCallbacks(IMainCameraActions instance)
        {
            if (m_Wrapper.m_MainCameraActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnZoom;
                @LeftMouseButtonDown.started -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.performed -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.canceled -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnLeftMouseButtonDown;
                @LeftMouseButtonUp.started -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.performed -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.canceled -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnLeftMouseButtonUp;
                @RightMouseButtonDown.started -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnRightMouseButtonDown;
                @RightMouseButtonDown.performed -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnRightMouseButtonDown;
                @RightMouseButtonDown.canceled -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnRightMouseButtonDown;
                @RightMouseButtonUp.started -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnRightMouseButtonUp;
                @RightMouseButtonUp.performed -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnRightMouseButtonUp;
                @RightMouseButtonUp.canceled -= m_Wrapper.m_MainCameraActionsCallbackInterface.OnRightMouseButtonUp;
            }
            m_Wrapper.m_MainCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @LeftMouseButtonDown.started += instance.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.performed += instance.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.canceled += instance.OnLeftMouseButtonDown;
                @LeftMouseButtonUp.started += instance.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.performed += instance.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.canceled += instance.OnLeftMouseButtonUp;
                @RightMouseButtonDown.started += instance.OnRightMouseButtonDown;
                @RightMouseButtonDown.performed += instance.OnRightMouseButtonDown;
                @RightMouseButtonDown.canceled += instance.OnRightMouseButtonDown;
                @RightMouseButtonUp.started += instance.OnRightMouseButtonUp;
                @RightMouseButtonUp.performed += instance.OnRightMouseButtonUp;
                @RightMouseButtonUp.canceled += instance.OnRightMouseButtonUp;
            }
        }
    }
    public MainCameraActions @MainCamera => new MainCameraActions(this);

    // MapCamera
    private readonly InputActionMap m_MapCamera;
    private IMapCameraActions m_MapCameraActionsCallbackInterface;
    private readonly InputAction m_MapCamera_Zoom;
    private readonly InputAction m_MapCamera_Movement;
    private readonly InputAction m_MapCamera_LeftClick;
    public struct MapCameraActions
    {
        private @InputControls m_Wrapper;
        public MapCameraActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_MapCamera_Zoom;
        public InputAction @Movement => m_Wrapper.m_MapCamera_Movement;
        public InputAction @LeftClick => m_Wrapper.m_MapCamera_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_MapCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapCameraActions set) { return set.Get(); }
        public void SetCallbacks(IMapCameraActions instance)
        {
            if (m_Wrapper.m_MapCameraActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnZoom;
                @Movement.started -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnMovement;
                @LeftClick.started -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_MapCameraActionsCallbackInterface.OnLeftClick;
            }
            m_Wrapper.m_MapCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
            }
        }
    }
    public MapCameraActions @MapCamera => new MapCameraActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private IBuildingActions m_BuildingActionsCallbackInterface;
    private readonly InputAction m_Building_LeftMouseButtonDown;
    private readonly InputAction m_Building_LeftMouseButtonUp;
    private readonly InputAction m_Building_RightMouseButtonDown;
    private readonly InputAction m_Building_Rotate;
    public struct BuildingActions
    {
        private @InputControls m_Wrapper;
        public BuildingActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMouseButtonDown => m_Wrapper.m_Building_LeftMouseButtonDown;
        public InputAction @LeftMouseButtonUp => m_Wrapper.m_Building_LeftMouseButtonUp;
        public InputAction @RightMouseButtonDown => m_Wrapper.m_Building_RightMouseButtonDown;
        public InputAction @Rotate => m_Wrapper.m_Building_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterface != null)
            {
                @LeftMouseButtonDown.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnLeftMouseButtonDown;
                @LeftMouseButtonUp.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnLeftMouseButtonUp;
                @RightMouseButtonDown.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRightMouseButtonDown;
                @RightMouseButtonDown.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRightMouseButtonDown;
                @RightMouseButtonDown.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRightMouseButtonDown;
                @Rotate.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_BuildingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftMouseButtonDown.started += instance.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.performed += instance.OnLeftMouseButtonDown;
                @LeftMouseButtonDown.canceled += instance.OnLeftMouseButtonDown;
                @LeftMouseButtonUp.started += instance.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.performed += instance.OnLeftMouseButtonUp;
                @LeftMouseButtonUp.canceled += instance.OnLeftMouseButtonUp;
                @RightMouseButtonDown.started += instance.OnRightMouseButtonDown;
                @RightMouseButtonDown.performed += instance.OnRightMouseButtonDown;
                @RightMouseButtonDown.canceled += instance.OnRightMouseButtonDown;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public BuildingActions @Building => new BuildingActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Loot;
    private readonly InputAction m_Player_RightClick;
    private readonly InputAction m_Player_Interaction;
    private readonly InputAction m_Player_Market;
    public struct PlayerActions
    {
        private @InputControls m_Wrapper;
        public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Loot => m_Wrapper.m_Player_Loot;
        public InputAction @RightClick => m_Wrapper.m_Player_RightClick;
        public InputAction @Interaction => m_Wrapper.m_Player_Interaction;
        public InputAction @Market => m_Wrapper.m_Player_Market;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Loot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLoot;
                @Loot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLoot;
                @Loot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLoot;
                @RightClick.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightClick;
                @Interaction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteraction;
                @Market.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMarket;
                @Market.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMarket;
                @Market.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMarket;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Loot.started += instance.OnLoot;
                @Loot.performed += instance.OnLoot;
                @Loot.canceled += instance.OnLoot;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
                @Market.started += instance.OnMarket;
                @Market.performed += instance.OnMarket;
                @Market.canceled += instance.OnMarket;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Unit
    private readonly InputActionMap m_Unit;
    private IUnitActions m_UnitActionsCallbackInterface;
    private readonly InputAction m_Unit_Attack;
    private readonly InputAction m_Unit_Patrol;
    private readonly InputAction m_Unit_Hold;
    public struct UnitActions
    {
        private @InputControls m_Wrapper;
        public UnitActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Unit_Attack;
        public InputAction @Patrol => m_Wrapper.m_Unit_Patrol;
        public InputAction @Hold => m_Wrapper.m_Unit_Hold;
        public InputActionMap Get() { return m_Wrapper.m_Unit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
        public void SetCallbacks(IUnitActions instance)
        {
            if (m_Wrapper.m_UnitActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnAttack;
                @Patrol.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnPatrol;
                @Patrol.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnPatrol;
                @Patrol.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnPatrol;
                @Hold.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnHold;
                @Hold.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnHold;
                @Hold.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnHold;
            }
            m_Wrapper.m_UnitActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Patrol.started += instance.OnPatrol;
                @Patrol.performed += instance.OnPatrol;
                @Patrol.canceled += instance.OnPatrol;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
            }
        }
    }
    public UnitActions @Unit => new UnitActions(this);

    // Structure
    private readonly InputActionMap m_Structure;
    private IStructureActions m_StructureActionsCallbackInterface;
    private readonly InputAction m_Structure_StrClick;
    public struct StructureActions
    {
        private @InputControls m_Wrapper;
        public StructureActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StrClick => m_Wrapper.m_Structure_StrClick;
        public InputActionMap Get() { return m_Wrapper.m_Structure; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StructureActions set) { return set.Get(); }
        public void SetCallbacks(IStructureActions instance)
        {
            if (m_Wrapper.m_StructureActionsCallbackInterface != null)
            {
                @StrClick.started -= m_Wrapper.m_StructureActionsCallbackInterface.OnStrClick;
                @StrClick.performed -= m_Wrapper.m_StructureActionsCallbackInterface.OnStrClick;
                @StrClick.canceled -= m_Wrapper.m_StructureActionsCallbackInterface.OnStrClick;
            }
            m_Wrapper.m_StructureActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StrClick.started += instance.OnStrClick;
                @StrClick.performed += instance.OnStrClick;
                @StrClick.canceled += instance.OnStrClick;
            }
        }
    }
    public StructureActions @Structure => new StructureActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_PlayerInven;
    private readonly InputAction m_Inventory_ItemSpawner;
    private readonly InputAction m_Inventory_BuildingInven;
    private readonly InputAction m_Inventory_SplitterFilter;
    private readonly InputAction m_Inventory_Recipe;
    private readonly InputAction m_Inventory_SlotLeftClick;
    private readonly InputAction m_Inventory_SlotRightClickHold;
    public struct InventoryActions
    {
        private @InputControls m_Wrapper;
        public InventoryActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerInven => m_Wrapper.m_Inventory_PlayerInven;
        public InputAction @ItemSpawner => m_Wrapper.m_Inventory_ItemSpawner;
        public InputAction @BuildingInven => m_Wrapper.m_Inventory_BuildingInven;
        public InputAction @SplitterFilter => m_Wrapper.m_Inventory_SplitterFilter;
        public InputAction @Recipe => m_Wrapper.m_Inventory_Recipe;
        public InputAction @SlotLeftClick => m_Wrapper.m_Inventory_SlotLeftClick;
        public InputAction @SlotRightClickHold => m_Wrapper.m_Inventory_SlotRightClickHold;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @PlayerInven.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnPlayerInven;
                @PlayerInven.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnPlayerInven;
                @PlayerInven.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnPlayerInven;
                @ItemSpawner.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnItemSpawner;
                @ItemSpawner.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnItemSpawner;
                @ItemSpawner.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnItemSpawner;
                @BuildingInven.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnBuildingInven;
                @BuildingInven.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnBuildingInven;
                @BuildingInven.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnBuildingInven;
                @SplitterFilter.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSplitterFilter;
                @SplitterFilter.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSplitterFilter;
                @SplitterFilter.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSplitterFilter;
                @Recipe.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRecipe;
                @Recipe.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRecipe;
                @Recipe.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRecipe;
                @SlotLeftClick.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSlotLeftClick;
                @SlotLeftClick.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSlotLeftClick;
                @SlotLeftClick.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSlotLeftClick;
                @SlotRightClickHold.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSlotRightClickHold;
                @SlotRightClickHold.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSlotRightClickHold;
                @SlotRightClickHold.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSlotRightClickHold;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerInven.started += instance.OnPlayerInven;
                @PlayerInven.performed += instance.OnPlayerInven;
                @PlayerInven.canceled += instance.OnPlayerInven;
                @ItemSpawner.started += instance.OnItemSpawner;
                @ItemSpawner.performed += instance.OnItemSpawner;
                @ItemSpawner.canceled += instance.OnItemSpawner;
                @BuildingInven.started += instance.OnBuildingInven;
                @BuildingInven.performed += instance.OnBuildingInven;
                @BuildingInven.canceled += instance.OnBuildingInven;
                @SplitterFilter.started += instance.OnSplitterFilter;
                @SplitterFilter.performed += instance.OnSplitterFilter;
                @SplitterFilter.canceled += instance.OnSplitterFilter;
                @Recipe.started += instance.OnRecipe;
                @Recipe.performed += instance.OnRecipe;
                @Recipe.canceled += instance.OnRecipe;
                @SlotLeftClick.started += instance.OnSlotLeftClick;
                @SlotLeftClick.performed += instance.OnSlotLeftClick;
                @SlotLeftClick.canceled += instance.OnSlotLeftClick;
                @SlotRightClickHold.started += instance.OnSlotRightClickHold;
                @SlotRightClickHold.performed += instance.OnSlotRightClickHold;
                @SlotRightClickHold.canceled += instance.OnSlotRightClickHold;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // HotKey
    private readonly InputActionMap m_HotKey;
    private IHotKeyActions m_HotKeyActionsCallbackInterface;
    private readonly InputAction m_HotKey_Debug;
    private readonly InputAction m_HotKey_Supply;
    private readonly InputAction m_HotKey_Escape;
    private readonly InputAction m_HotKey_Building;
    private readonly InputAction m_HotKey_ScienceTree;
    private readonly InputAction m_HotKey_EnergyCheck;
    private readonly InputAction m_HotKey_Save;
    private readonly InputAction m_HotKey_Load;
    private readonly InputAction m_HotKey_Overall;
    public struct HotKeyActions
    {
        private @InputControls m_Wrapper;
        public HotKeyActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Debug => m_Wrapper.m_HotKey_Debug;
        public InputAction @Supply => m_Wrapper.m_HotKey_Supply;
        public InputAction @Escape => m_Wrapper.m_HotKey_Escape;
        public InputAction @Building => m_Wrapper.m_HotKey_Building;
        public InputAction @ScienceTree => m_Wrapper.m_HotKey_ScienceTree;
        public InputAction @EnergyCheck => m_Wrapper.m_HotKey_EnergyCheck;
        public InputAction @Save => m_Wrapper.m_HotKey_Save;
        public InputAction @Load => m_Wrapper.m_HotKey_Load;
        public InputAction @Overall => m_Wrapper.m_HotKey_Overall;
        public InputActionMap Get() { return m_Wrapper.m_HotKey; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HotKeyActions set) { return set.Get(); }
        public void SetCallbacks(IHotKeyActions instance)
        {
            if (m_Wrapper.m_HotKeyActionsCallbackInterface != null)
            {
                @Debug.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnDebug;
                @Debug.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnDebug;
                @Debug.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnDebug;
                @Supply.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnSupply;
                @Supply.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnSupply;
                @Supply.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnSupply;
                @Escape.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnEscape;
                @Building.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnBuilding;
                @Building.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnBuilding;
                @Building.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnBuilding;
                @ScienceTree.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnScienceTree;
                @ScienceTree.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnScienceTree;
                @ScienceTree.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnScienceTree;
                @EnergyCheck.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnEnergyCheck;
                @EnergyCheck.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnEnergyCheck;
                @EnergyCheck.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnEnergyCheck;
                @Save.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnSave;
                @Save.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnSave;
                @Save.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnSave;
                @Load.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnLoad;
                @Load.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnLoad;
                @Load.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnLoad;
                @Overall.started -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnOverall;
                @Overall.performed -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnOverall;
                @Overall.canceled -= m_Wrapper.m_HotKeyActionsCallbackInterface.OnOverall;
            }
            m_Wrapper.m_HotKeyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Debug.started += instance.OnDebug;
                @Debug.performed += instance.OnDebug;
                @Debug.canceled += instance.OnDebug;
                @Supply.started += instance.OnSupply;
                @Supply.performed += instance.OnSupply;
                @Supply.canceled += instance.OnSupply;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Building.started += instance.OnBuilding;
                @Building.performed += instance.OnBuilding;
                @Building.canceled += instance.OnBuilding;
                @ScienceTree.started += instance.OnScienceTree;
                @ScienceTree.performed += instance.OnScienceTree;
                @ScienceTree.canceled += instance.OnScienceTree;
                @EnergyCheck.started += instance.OnEnergyCheck;
                @EnergyCheck.performed += instance.OnEnergyCheck;
                @EnergyCheck.canceled += instance.OnEnergyCheck;
                @Save.started += instance.OnSave;
                @Save.performed += instance.OnSave;
                @Save.canceled += instance.OnSave;
                @Load.started += instance.OnLoad;
                @Load.performed += instance.OnLoad;
                @Load.canceled += instance.OnLoad;
                @Overall.started += instance.OnOverall;
                @Overall.performed += instance.OnOverall;
                @Overall.canceled += instance.OnOverall;
            }
        }
    }
    public HotKeyActions @HotKey => new HotKeyActions(this);

    // Hold
    private readonly InputActionMap m_Hold;
    private IHoldActions m_HoldActionsCallbackInterface;
    private readonly InputAction m_Hold_Ctrl;
    private readonly InputAction m_Hold_Shift;
    private readonly InputAction m_Hold_Alt;
    private readonly InputAction m_Hold_MouseLeft;
    private readonly InputAction m_Hold_MouseRight;
    public struct HoldActions
    {
        private @InputControls m_Wrapper;
        public HoldActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Ctrl => m_Wrapper.m_Hold_Ctrl;
        public InputAction @Shift => m_Wrapper.m_Hold_Shift;
        public InputAction @Alt => m_Wrapper.m_Hold_Alt;
        public InputAction @MouseLeft => m_Wrapper.m_Hold_MouseLeft;
        public InputAction @MouseRight => m_Wrapper.m_Hold_MouseRight;
        public InputActionMap Get() { return m_Wrapper.m_Hold; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HoldActions set) { return set.Get(); }
        public void SetCallbacks(IHoldActions instance)
        {
            if (m_Wrapper.m_HoldActionsCallbackInterface != null)
            {
                @Ctrl.started -= m_Wrapper.m_HoldActionsCallbackInterface.OnCtrl;
                @Ctrl.performed -= m_Wrapper.m_HoldActionsCallbackInterface.OnCtrl;
                @Ctrl.canceled -= m_Wrapper.m_HoldActionsCallbackInterface.OnCtrl;
                @Shift.started -= m_Wrapper.m_HoldActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_HoldActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_HoldActionsCallbackInterface.OnShift;
                @Alt.started -= m_Wrapper.m_HoldActionsCallbackInterface.OnAlt;
                @Alt.performed -= m_Wrapper.m_HoldActionsCallbackInterface.OnAlt;
                @Alt.canceled -= m_Wrapper.m_HoldActionsCallbackInterface.OnAlt;
                @MouseLeft.started -= m_Wrapper.m_HoldActionsCallbackInterface.OnMouseLeft;
                @MouseLeft.performed -= m_Wrapper.m_HoldActionsCallbackInterface.OnMouseLeft;
                @MouseLeft.canceled -= m_Wrapper.m_HoldActionsCallbackInterface.OnMouseLeft;
                @MouseRight.started -= m_Wrapper.m_HoldActionsCallbackInterface.OnMouseRight;
                @MouseRight.performed -= m_Wrapper.m_HoldActionsCallbackInterface.OnMouseRight;
                @MouseRight.canceled -= m_Wrapper.m_HoldActionsCallbackInterface.OnMouseRight;
            }
            m_Wrapper.m_HoldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Ctrl.started += instance.OnCtrl;
                @Ctrl.performed += instance.OnCtrl;
                @Ctrl.canceled += instance.OnCtrl;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
                @Alt.started += instance.OnAlt;
                @Alt.performed += instance.OnAlt;
                @Alt.canceled += instance.OnAlt;
                @MouseLeft.started += instance.OnMouseLeft;
                @MouseLeft.performed += instance.OnMouseLeft;
                @MouseLeft.canceled += instance.OnMouseLeft;
                @MouseRight.started += instance.OnMouseRight;
                @MouseRight.performed += instance.OnMouseRight;
                @MouseRight.canceled += instance.OnMouseRight;
            }
        }
    }
    public HoldActions @Hold => new HoldActions(this);

    // State
    private readonly InputActionMap m_State;
    private IStateActions m_StateActionsCallbackInterface;
    private readonly InputAction m_State_ToggleMap;
    public struct StateActions
    {
        private @InputControls m_Wrapper;
        public StateActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleMap => m_Wrapper.m_State_ToggleMap;
        public InputActionMap Get() { return m_Wrapper.m_State; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StateActions set) { return set.Get(); }
        public void SetCallbacks(IStateActions instance)
        {
            if (m_Wrapper.m_StateActionsCallbackInterface != null)
            {
                @ToggleMap.started -= m_Wrapper.m_StateActionsCallbackInterface.OnToggleMap;
                @ToggleMap.performed -= m_Wrapper.m_StateActionsCallbackInterface.OnToggleMap;
                @ToggleMap.canceled -= m_Wrapper.m_StateActionsCallbackInterface.OnToggleMap;
            }
            m_Wrapper.m_StateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleMap.started += instance.OnToggleMap;
                @ToggleMap.performed += instance.OnToggleMap;
                @ToggleMap.canceled += instance.OnToggleMap;
            }
        }
    }
    public StateActions @State => new StateActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_TrackedDeviceOrientation;
    private readonly InputAction m_UI_TrackedDevicePosition;
    private readonly InputAction m_UI_RightClick;
    private readonly InputAction m_UI_MiddleClick;
    private readonly InputAction m_UI_ScrollWheel;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Submit;
    private readonly InputAction m_UI_Navigate;
    public struct UIActions
    {
        private @InputControls m_Wrapper;
        public UIActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TrackedDeviceOrientation => m_Wrapper.m_UI_TrackedDeviceOrientation;
        public InputAction @TrackedDevicePosition => m_Wrapper.m_UI_TrackedDevicePosition;
        public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
        public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
        public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @TrackedDeviceOrientation.started -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDeviceOrientation;
                @TrackedDevicePosition.started -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDevicePosition;
                @RightClick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnRightClick;
                @MiddleClick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnMiddleClick;
                @ScrollWheel.started -= m_Wrapper.m_UIActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnScrollWheel;
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Point.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Cancel.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCancel;
                @Submit.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSubmit;
                @Navigate.started -= m_Wrapper.m_UIActionsCallbackInterface.OnNavigate;
                @Navigate.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnNavigate;
                @Navigate.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnNavigate;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
                @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IMainCameraActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnLeftMouseButtonDown(InputAction.CallbackContext context);
        void OnLeftMouseButtonUp(InputAction.CallbackContext context);
        void OnRightMouseButtonDown(InputAction.CallbackContext context);
        void OnRightMouseButtonUp(InputAction.CallbackContext context);
    }
    public interface IMapCameraActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnLeftMouseButtonDown(InputAction.CallbackContext context);
        void OnLeftMouseButtonUp(InputAction.CallbackContext context);
        void OnRightMouseButtonDown(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLoot(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnMarket(InputAction.CallbackContext context);
    }
    public interface IUnitActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnPatrol(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
    }
    public interface IStructureActions
    {
        void OnStrClick(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnPlayerInven(InputAction.CallbackContext context);
        void OnItemSpawner(InputAction.CallbackContext context);
        void OnBuildingInven(InputAction.CallbackContext context);
        void OnSplitterFilter(InputAction.CallbackContext context);
        void OnRecipe(InputAction.CallbackContext context);
        void OnSlotLeftClick(InputAction.CallbackContext context);
        void OnSlotRightClickHold(InputAction.CallbackContext context);
    }
    public interface IHotKeyActions
    {
        void OnDebug(InputAction.CallbackContext context);
        void OnSupply(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnBuilding(InputAction.CallbackContext context);
        void OnScienceTree(InputAction.CallbackContext context);
        void OnEnergyCheck(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
        void OnOverall(InputAction.CallbackContext context);
    }
    public interface IHoldActions
    {
        void OnCtrl(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnAlt(InputAction.CallbackContext context);
        void OnMouseLeft(InputAction.CallbackContext context);
        void OnMouseRight(InputAction.CallbackContext context);
    }
    public interface IStateActions
    {
        void OnToggleMap(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
        void OnTrackedDevicePosition(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnMiddleClick(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnNavigate(InputAction.CallbackContext context);
    }
}

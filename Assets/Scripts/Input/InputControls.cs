//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Scripts/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Input/InputControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""MainCamera"",
            ""id"": ""9b28ec48-def5-4f4a-8a60-0032b1aa50d4"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7623d1a4-7a76-44b0-a2ab-45a6d3795ad0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""02873271-613f-4961-9680-b4ae49e212e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseButtonUp"",
                    ""type"": ""Button"",
                    ""id"": ""357aa058-b1c8-428e-b74f-b5a4c4194361"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""730142c6-cd25-4a1e-8c11-79feef3c0a09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseButtonUp"",
                    ""type"": ""Button"",
                    ""id"": ""3724448e-0014-4f65-b433-1bc1d2896d9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseButtonDoubleClick"",
                    ""type"": ""Button"",
                    ""id"": ""83241700-9a35-4ddf-8f00-d43e0e20ee36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapTime=0.1,tapDelay=0.1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1198663-4583-4dfc-baeb-b14b3010325a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59a04677-4e55-4605-a772-dcacd7e55a5e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f5126c3-041d-45c3-bf3f-c50e94e5f66b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""810c3c34-7d90-4810-a0c6-e0e388fe8b3d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3017406b-2f30-434b-b0c0-230d06f0c6cb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightMouseButtonUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1c97458-fc54-4c68-8b45-0a8d64ed1542"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonDoubleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapCamera"",
            ""id"": ""c7e04b48-94a0-475d-976c-a48ced853672"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ecface99-8aab-4b33-95f6-ef9dd73dd416"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1f4c0166-19d2-4dad-8788-ed4ed7e4e33a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""81edef1b-bf46-45ff-a415-0afd027851c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""186a3b88-39f6-41ba-afb0-03e1f990af92"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""478e4246-59d9-490b-bc91-3349fc72be15"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ac7b1840-781a-42c5-a465-d2305a125969"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1eb9ab47-50f5-49d4-8e26-378e2f7db692"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""faa526d9-c403-45c7-b964-d3808055002a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""34d0c799-eb20-4408-8960-568d0fd30819"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fd67025e-13f1-45dc-988e-e7e3b444a43e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""046a5523-3032-48c2-893d-6507dd2800d8"",
            ""actions"": [
                {
                    ""name"": ""LeftMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""93fc001f-7297-4a90-9b44-035b56fa45fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseButtonUp"",
                    ""type"": ""Button"",
                    ""id"": ""8e60e949-0512-4641-a108-20fe737bf8df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseButtonDown"",
                    ""type"": ""Button"",
                    ""id"": ""b9b8670f-6000-4c4a-998f-5cad6054ab14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""0cc79e69-5c0d-4387-bf26-2bad487637eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuildingInven"",
                    ""type"": ""Button"",
                    ""id"": ""07b0f319-adf1-4a06-995d-a6004d6a4c83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftBuildingDown"",
                    ""type"": ""Button"",
                    ""id"": ""626d6f00-0972-4377-83ea-4725acc6c16d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftBuildingUp"",
                    ""type"": ""Button"",
                    ""id"": ""9b228df8-28c0-47dc-8967-353b95b28051"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2057eb2a-f3b4-4d5b-b12e-c324640535b8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f974adc-867b-4a20-956f-a3facb74b59b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightMouseButtonDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71515b7a-b64f-4ed8-b82a-bb479278efb7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftMouseButtonUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f9d9ecd-1dbb-4b00-8703-08f7c2b58301"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a806df7a-a8fd-4ef5-bdb1-30796e6fa391"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eaac85cc-397b-4235-af90-0bfdb06b7890"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fc6d694-e2e5-4c07-9d99-851fe08db376"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""565c12e3-4686-47c7-9bf3-66194dc315ce"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd531546-1032-4ae3-8656-8ce99d2d0d49"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea0d43e8-8073-4b8c-a39b-25dd45b66307"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftBuildingDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d035bcf-4db7-40b7-a0ab-b34a848e5b44"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftBuildingUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""a2754b26-8fe1-4f5f-87ba-cc86b9bfdfd4"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bef394ae-2f70-4783-aba3-9d4fe8d8616e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Loot"",
                    ""type"": ""Button"",
                    ""id"": ""550e0b53-e7fa-41f3-bc64-28ef132b3a67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""b184b0b1-98f6-4769-8eb8-80bba2e7a09f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""fb6591dc-5f00-4f3f-96cc-b8e0c218c208"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""3f5ab9d8-2735-499a-bf5b-16541617d2f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TankAttack"",
                    ""type"": ""Button"",
                    ""id"": ""708e82c5-ab8f-4e45-952f-d40237166de8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TankInven"",
                    ""type"": ""Button"",
                    ""id"": ""efdbe5b8-4e87-458e-bff3-0ae6aa00c50b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""01efdc58-bb1d-4a04-9124-28aa8069fb31"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""13d68cef-9ce1-4f74-901b-638e30a32abc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e68c4e1f-6a3e-4db1-8e92-c44b94699108"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b29d5a30-284a-4a05-aac7-f35da731588e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f015a196-780a-436a-8aa4-a9cd83fd9ce6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dceab05a-76ff-4260-a48c-26c8c3d3a400"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc26588a-78f3-4114-8c30-b42cc4bc8a00"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Loot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""008efee7-f805-40e9-8824-6c15e1214839"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f6bebe3-c6c5-4c60-8f46-0dafb52847df"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b5de75a-1e53-45ef-947a-7d6aa0fe840f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ca1f1b5-3ae0-4b99-b331-53b762fb91ee"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Unit"",
            ""id"": ""1ff26e3a-a6af-4a87-89ef-dd3fb429f05f"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""edee8a39-cded-4377-bdae-fa751373f8a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Patrol"",
                    ""type"": ""Button"",
                    ""id"": ""b5052db8-a1a6-4591-90e5-cbd6ee385c76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""b1d0fc87-5c86-4ce0-9c4f-e1221eff88be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""378ea5ce-3b52-419a-96ce-ad15ef981a45"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b5292bf-4e4e-410c-8e2f-850fed5def7a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Patrol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1717916a-4f75-43ee-9035-8f7fd552d29b"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Structure"",
            ""id"": ""c25aab9e-6aef-42c2-8172-9858d90f214d"",
            ""actions"": [
                {
                    ""name"": ""StrClick"",
                    ""type"": ""Button"",
                    ""id"": ""468cfed4-804d-4468-b28e-c08f5feedcc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""478e2d11-b9b3-4bcc-9e3a-a29d5b5e2930"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""StrClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""205f9662-adbc-4110-8179-f504f29be192"",
            ""actions"": [
                {
                    ""name"": ""PlayerInven"",
                    ""type"": ""Button"",
                    ""id"": ""5b2576a3-eafd-4421-8f2a-59a21f0e81f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemSpawner"",
                    ""type"": ""Button"",
                    ""id"": ""8f8924c4-d6a3-4160-a00d-5c521c008d0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuildingInven"",
                    ""type"": ""Button"",
                    ""id"": ""0eed8e9b-4e7f-48b6-9c23-f7f238d5a27f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SplitterFilter"",
                    ""type"": ""Button"",
                    ""id"": ""f9d51da5-cb26-4fa1-b981-6debef4908a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recipe"",
                    ""type"": ""Button"",
                    ""id"": ""05362b0e-82de-413e-9d52-d9576116c676"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""b34e0754-005a-4379-a287-75acff3245e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotRightClickHold"",
                    ""type"": ""Button"",
                    ""id"": ""e875a3d9-d19b-48cf-a8c6-59438caa92ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""607817bf-08ea-44f6-8c9d-51e3daae2712"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PlayerInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30662629-be72-4c8b-9547-291f91b444c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ItemSpawner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3488d781-49af-4ba3-a1c4-80d288567ef7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""BuildingInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0efb9578-6793-43f1-99a7-b67ac8ad1328"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SplitterFilter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cab868a5-cf13-490b-8e3c-a36c834f6100"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Recipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cfc30c8-2651-43dd-abc5-9f6d5be60972"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SlotLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7156d74-9125-41e3-9c3f-6252e0fc9d76"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SlotRightClickHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HotKey"",
            ""id"": ""51e334b0-de82-4a91-b786-f68e2d53ba6a"",
            ""actions"": [
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""a6cb2400-8aa4-4172-8228-81f0969d277f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Supply"",
                    ""type"": ""Button"",
                    ""id"": ""5716835f-ae40-458e-adab-563ea6d5a69d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""0921331f-fac7-46e5-b133-4d8280320b8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScienceTree"",
                    ""type"": ""Button"",
                    ""id"": ""b35d603e-71a6-4e26-9123-d943e7bb5641"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnergyCheck"",
                    ""type"": ""Button"",
                    ""id"": ""3b290ded-a785-4591-9401-85ea4bd564b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Overall"",
                    ""type"": ""Button"",
                    ""id"": ""b6f12cc3-4e90-45b3-8a33-29fe864a060e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameStop"",
                    ""type"": ""Button"",
                    ""id"": ""8901555e-f797-4070-bc3d-f1c78dddf09d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicUIBtnsSwap"",
                    ""type"": ""Button"",
                    ""id"": ""e2bd8460-be16-4ea6-9d07-7dd4771f9199"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UIClose"",
                    ""type"": ""Button"",
                    ""id"": ""6652ffdb-3f9c-4cbf-ab31-b5a408d5214a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InfoDictionary"",
                    ""type"": ""Button"",
                    ""id"": ""6acc9250-82b3-47b9-a79d-fe944ccfaed6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TimeUIUp"",
                    ""type"": ""Button"",
                    ""id"": ""19e711e4-a8d1-44e1-a11f-354c4e538211"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TimeUIDown"",
                    ""type"": ""Button"",
                    ""id"": ""5904349d-b85a-43a7-bf76-9990fdc79ae8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""788c92ad-45c5-4361-9c3d-348e4d3cd6f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FactoryOverlay"",
                    ""type"": ""Button"",
                    ""id"": ""fa401fbc-b4d3-4bec-b8e3-fa4a1248d085"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""85bbca10-647d-49bd-9d1b-7676d4064648"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""993a7ceb-ca24-4d47-8c35-d3748d9c3bc0"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Supply"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ae25ffc-4bd9-4b3f-8a8a-2c4c5c179150"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b947f9a2-f3f1-4f13-af53-0aa5e256f6f4"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScienceTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d1ecdea-1a9d-4b62-96d1-b0ea2ed1d0d6"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""EnergyCheck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc06ff96-9bc8-4a0e-a1fd-92f8e9667bf9"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Overall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09cb02a7-8e92-42e1-bf9d-c9f054dcc8aa"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""GameStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8862477d-0e7b-451f-ae4d-862064aa52e1"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicUIBtnsSwap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feb89cc3-29bc-4ca9-a27a-c7a3c754effd"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97c0270a-3a39-4f6f-9737-cdb1e8b78595"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""InfoDictionary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97154de2-7118-4b31-adb8-a8baa34dafcf"",
                    ""path"": ""<Keyboard>/pageUp"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TimeUIUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96958800-6dcf-4bb3-94ef-e9b6dd84886c"",
                    ""path"": ""<Keyboard>/pageDown"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TimeUIDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f13fdb20-0155-4225-b0d8-7090e641758e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7cb8b8a-cc92-4560-bcd8-4a77cb956119"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FactoryOverlay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hold"",
            ""id"": ""79f4d7cb-6226-48af-9791-91e0bbb68927"",
            ""actions"": [
                {
                    ""name"": ""Ctrl"",
                    ""type"": ""Button"",
                    ""id"": ""5459cd3e-18a4-4cc2-94fa-5e331ba856c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""bc63a25e-a3de-4fd7-a958-7bc5dba409e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt"",
                    ""type"": ""Button"",
                    ""id"": ""fcfcaa82-b8a8-47f9-b7c7-d177ac1eab21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ae194fab-828d-4964-a278-8464699ccbe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRight"",
                    ""type"": ""Button"",
                    ""id"": ""33cbeb75-a63a-4c31-8ed2-f9627c898744"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4fb41eee-f32e-4b9d-8495-66bd0007b7f3"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Ctrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d64ae89-9ed7-4faa-8aaa-d7bf48b64b71"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea8d7275-24e0-4c5e-8e5b-a89e954186e5"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Alt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""febbaa78-4f77-455d-a803-47b68124fd98"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74ce0754-9495-4646-bd54-ce7521794a48"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Chat"",
            ""id"": ""e122bf59-26e0-4f0b-8f26-f353959317c4"",
            ""actions"": [
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""b44c3cf2-d423-4da4-ac89-d71f84dc73da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20a43e39-8c5f-4277-9d42-c41814139b57"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""State"",
            ""id"": ""5e883f74-3828-46bb-a4ed-62b9380cf114"",
            ""actions"": [
                {
                    ""name"": ""ToggleMap"",
                    ""type"": ""Button"",
                    ""id"": ""8b4643aa-c69c-4608-87d1-4643d58b5d44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35c133e4-8ee3-47c3-ac08-ac810d8cb6f5"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ToggleMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""9872ce8c-9647-46b9-9689-ce7ca720073c"",
            ""actions"": [
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""749bec82-70d2-4e90-a7f4-ef427028cbd2"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e221dff2-57a2-4415-9147-ff337049e8eb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""923e1dd9-6915-47d5-a446-6a9c3b6da86c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c59bdcd6-a420-453d-aedf-09ddf22378e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""43338873-c217-479c-bebf-414b65481e85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d8612575-ff56-4972-9fcf-75da426a3be3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b18a59f-5034-4fb1-b770-aa24b98da756"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""e928bf58-8fe2-41bc-9a63-b0f4158d6d63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""3e0e3989-6b2f-418c-99c5-5a2342a55b7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6bd92c2a-5e26-4b0a-aeff-2c17636e3b3e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""f0fbbaaf-6c2f-4c39-adc0-a204341a7058"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7a07e06d-1243-4a2d-9687-228f81776d8b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c96d81fd-951d-44ce-a7c3-0b916401237c"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3041602f-65c9-4e8e-9d9e-ce25e137ec26"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd632bed-ad5f-4bbf-a343-3b5c944c7ee3"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a95e1cd9-00f2-419c-ac1a-59b3d08407d9"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c8d824e2-5489-47f6-9a67-4d1932dfa0cd"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ebfae3d8-7495-4aeb-a80a-7950639a948f"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""949dc441-acfb-42b5-a6c2-1d81dcfe1c8a"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""83e732d8-2b59-4222-bcb2-caee57cd2ec6"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""f49b84e0-8da8-457b-ac2d-30abbe0dde9d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""841845e9-dec0-419b-a20c-da45204ec33f"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d18a7ad1-6018-44af-84d3-e97a9244534d"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3c0f29d1-455c-4393-ab4d-c6c17d4abb1d"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2092f8de-6954-4cfc-a758-d4c9556b9666"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""e69049c9-3e4c-43e2-b631-ecb301eb5a44"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""55917586-3f4b-4b6b-9ea2-36d83b772f21"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7e7342b2-7d42-4faf-8e26-0886311c8bbe"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c7a4e59f-b289-4030-bf86-20af3c7b9764"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9234dbb5-6b7b-4e60-b689-93d11d2633d9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b5db7fd-550d-452e-91ef-3d20566a1cb0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bf5c2a88-f786-4c82-a61d-96066b7e72eb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ca4d6d47-e76f-436a-9f46-5ae4fd51f61d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b599fb5c-4c7f-4e7d-866f-9ce7fa3d35b7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a4be7e2-e541-423f-ab45-b5b78856d0e5"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ec34724-309d-40b8-bec3-db9220fb5462"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7238afa7-134b-4359-87a5-698f3bcd6a22"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27e363a6-2974-42f0-b6dc-a008174ef058"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a03e643a-954a-4678-962c-e32bef79b582"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58fe26e4-37ea-480d-8a85-7f7489a64639"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""929b8a11-faaf-4168-8140-357b70204b4c"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8200953-c24d-4a2a-84b0-bd6304426b13"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24308588-1beb-44e6-a903-f5bb71bfdca0"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36bd3a2f-a95f-49d5-a2d5-5989158a453c"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28bc6785-7651-42bc-8871-569edf7275a6"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57d55aea-c1b3-4d9d-a13d-f54f5a5e1b55"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d095b52a-011b-4a33-bd91-72660eb180cc"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""TrackedDevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af069dc5-7147-43bd-a3d5-34bb2442aeb1"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""TrackedDeviceOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainCamera
        m_MainCamera = asset.FindActionMap("MainCamera", throwIfNotFound: true);
        m_MainCamera_Zoom = m_MainCamera.FindAction("Zoom", throwIfNotFound: true);
        m_MainCamera_LeftMouseButtonDown = m_MainCamera.FindAction("LeftMouseButtonDown", throwIfNotFound: true);
        m_MainCamera_LeftMouseButtonUp = m_MainCamera.FindAction("LeftMouseButtonUp", throwIfNotFound: true);
        m_MainCamera_RightMouseButtonDown = m_MainCamera.FindAction("RightMouseButtonDown", throwIfNotFound: true);
        m_MainCamera_RightMouseButtonUp = m_MainCamera.FindAction("RightMouseButtonUp", throwIfNotFound: true);
        m_MainCamera_LeftMouseButtonDoubleClick = m_MainCamera.FindAction("LeftMouseButtonDoubleClick", throwIfNotFound: true);
        // MapCamera
        m_MapCamera = asset.FindActionMap("MapCamera", throwIfNotFound: true);
        m_MapCamera_Zoom = m_MapCamera.FindAction("Zoom", throwIfNotFound: true);
        m_MapCamera_Movement = m_MapCamera.FindAction("Movement", throwIfNotFound: true);
        m_MapCamera_LeftClick = m_MapCamera.FindAction("LeftClick", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_LeftMouseButtonDown = m_Building.FindAction("LeftMouseButtonDown", throwIfNotFound: true);
        m_Building_LeftMouseButtonUp = m_Building.FindAction("LeftMouseButtonUp", throwIfNotFound: true);
        m_Building_RightMouseButtonDown = m_Building.FindAction("RightMouseButtonDown", throwIfNotFound: true);
        m_Building_Rotate = m_Building.FindAction("Rotate", throwIfNotFound: true);
        m_Building_BuildingInven = m_Building.FindAction("BuildingInven", throwIfNotFound: true);
        m_Building_ShiftBuildingDown = m_Building.FindAction("ShiftBuildingDown", throwIfNotFound: true);
        m_Building_ShiftBuildingUp = m_Building.FindAction("ShiftBuildingUp", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Loot = m_Player.FindAction("Loot", throwIfNotFound: true);
        m_Player_RightClick = m_Player.FindAction("RightClick", throwIfNotFound: true);
        m_Player_LeftClick = m_Player.FindAction("LeftClick", throwIfNotFound: true);
        m_Player_Interaction = m_Player.FindAction("Interaction", throwIfNotFound: true);
        m_Player_TankAttack = m_Player.FindAction("TankAttack", throwIfNotFound: true);
        m_Player_TankInven = m_Player.FindAction("TankInven", throwIfNotFound: true);
        // Unit
        m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
        m_Unit_Attack = m_Unit.FindAction("Attack", throwIfNotFound: true);
        m_Unit_Patrol = m_Unit.FindAction("Patrol", throwIfNotFound: true);
        m_Unit_Hold = m_Unit.FindAction("Hold", throwIfNotFound: true);
        // Structure
        m_Structure = asset.FindActionMap("Structure", throwIfNotFound: true);
        m_Structure_StrClick = m_Structure.FindAction("StrClick", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_PlayerInven = m_Inventory.FindAction("PlayerInven", throwIfNotFound: true);
        m_Inventory_ItemSpawner = m_Inventory.FindAction("ItemSpawner", throwIfNotFound: true);
        m_Inventory_BuildingInven = m_Inventory.FindAction("BuildingInven", throwIfNotFound: true);
        m_Inventory_SplitterFilter = m_Inventory.FindAction("SplitterFilter", throwIfNotFound: true);
        m_Inventory_Recipe = m_Inventory.FindAction("Recipe", throwIfNotFound: true);
        m_Inventory_SlotLeftClick = m_Inventory.FindAction("SlotLeftClick", throwIfNotFound: true);
        m_Inventory_SlotRightClickHold = m_Inventory.FindAction("SlotRightClickHold", throwIfNotFound: true);
        // HotKey
        m_HotKey = asset.FindActionMap("HotKey", throwIfNotFound: true);
        m_HotKey_Debug = m_HotKey.FindAction("Debug", throwIfNotFound: true);
        m_HotKey_Supply = m_HotKey.FindAction("Supply", throwIfNotFound: true);
        m_HotKey_Escape = m_HotKey.FindAction("Escape", throwIfNotFound: true);
        m_HotKey_ScienceTree = m_HotKey.FindAction("ScienceTree", throwIfNotFound: true);
        m_HotKey_EnergyCheck = m_HotKey.FindAction("EnergyCheck", throwIfNotFound: true);
        m_HotKey_Overall = m_HotKey.FindAction("Overall", throwIfNotFound: true);
        m_HotKey_GameStop = m_HotKey.FindAction("GameStop", throwIfNotFound: true);
        m_HotKey_BasicUIBtnsSwap = m_HotKey.FindAction("BasicUIBtnsSwap", throwIfNotFound: true);
        m_HotKey_UIClose = m_HotKey.FindAction("UIClose", throwIfNotFound: true);
        m_HotKey_InfoDictionary = m_HotKey.FindAction("InfoDictionary", throwIfNotFound: true);
        m_HotKey_TimeUIUp = m_HotKey.FindAction("TimeUIUp", throwIfNotFound: true);
        m_HotKey_TimeUIDown = m_HotKey.FindAction("TimeUIDown", throwIfNotFound: true);
        m_HotKey_Enter = m_HotKey.FindAction("Enter", throwIfNotFound: true);
        m_HotKey_FactoryOverlay = m_HotKey.FindAction("FactoryOverlay", throwIfNotFound: true);
        // Hold
        m_Hold = asset.FindActionMap("Hold", throwIfNotFound: true);
        m_Hold_Ctrl = m_Hold.FindAction("Ctrl", throwIfNotFound: true);
        m_Hold_Shift = m_Hold.FindAction("Shift", throwIfNotFound: true);
        m_Hold_Alt = m_Hold.FindAction("Alt", throwIfNotFound: true);
        m_Hold_MouseLeft = m_Hold.FindAction("MouseLeft", throwIfNotFound: true);
        m_Hold_MouseRight = m_Hold.FindAction("MouseRight", throwIfNotFound: true);
        // Chat
        m_Chat = asset.FindActionMap("Chat", throwIfNotFound: true);
        m_Chat_Enter = m_Chat.FindAction("Enter", throwIfNotFound: true);
        // State
        m_State = asset.FindActionMap("State", throwIfNotFound: true);
        m_State_ToggleMap = m_State.FindAction("ToggleMap", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_TrackedDeviceOrientation = m_UI.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
        m_UI_TrackedDevicePosition = m_UI.FindAction("TrackedDevicePosition", throwIfNotFound: true);
        m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
        m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
        m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
    }

    ~@InputControls()
    {
        UnityEngine.Debug.Assert(!m_MainCamera.enabled, "This will cause a leak and performance issues, InputControls.MainCamera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MapCamera.enabled, "This will cause a leak and performance issues, InputControls.MapCamera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Building.enabled, "This will cause a leak and performance issues, InputControls.Building.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputControls.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Unit.enabled, "This will cause a leak and performance issues, InputControls.Unit.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Structure.enabled, "This will cause a leak and performance issues, InputControls.Structure.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Inventory.enabled, "This will cause a leak and performance issues, InputControls.Inventory.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_HotKey.enabled, "This will cause a leak and performance issues, InputControls.HotKey.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Hold.enabled, "This will cause a leak and performance issues, InputControls.Hold.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Chat.enabled, "This will cause a leak and performance issues, InputControls.Chat.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_State.enabled, "This will cause a leak and performance issues, InputControls.State.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, InputControls.UI.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainCamera
    private readonly InputActionMap m_MainCamera;
    private List<IMainCameraActions> m_MainCameraActionsCallbackInterfaces = new List<IMainCameraActions>();
    private readonly InputAction m_MainCamera_Zoom;
    private readonly InputAction m_MainCamera_LeftMouseButtonDown;
    private readonly InputAction m_MainCamera_LeftMouseButtonUp;
    private readonly InputAction m_MainCamera_RightMouseButtonDown;
    private readonly InputAction m_MainCamera_RightMouseButtonUp;
    private readonly InputAction m_MainCamera_LeftMouseButtonDoubleClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "MainCamera".
    /// </summary>
    public struct MainCameraActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MainCameraActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "MainCamera/Zoom".
        /// </summary>
        public InputAction @Zoom => m_Wrapper.m_MainCamera_Zoom;
        /// <summary>
        /// Provides access to the underlying input action "MainCamera/LeftMouseButtonDown".
        /// </summary>
        public InputAction @LeftMouseButtonDown => m_Wrapper.m_MainCamera_LeftMouseButtonDown;
        /// <summary>
        /// Provides access to the underlying input action "MainCamera/LeftMouseButtonUp".
        /// </summary>
        public InputAction @LeftMouseButtonUp => m_Wrapper.m_MainCamera_LeftMouseButtonUp;
        /// <summary>
        /// Provides access to the underlying input action "MainCamera/RightMouseButtonDown".
        /// </summary>
        public InputAction @RightMouseButtonDown => m_Wrapper.m_MainCamera_RightMouseButtonDown;
        /// <summary>
        /// Provides access to the underlying input action "MainCamera/RightMouseButtonUp".
        /// </summary>
        public InputAction @RightMouseButtonUp => m_Wrapper.m_MainCamera_RightMouseButtonUp;
        /// <summary>
        /// Provides access to the underlying input action "MainCamera/LeftMouseButtonDoubleClick".
        /// </summary>
        public InputAction @LeftMouseButtonDoubleClick => m_Wrapper.m_MainCamera_LeftMouseButtonDoubleClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_MainCamera; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MainCameraActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MainCameraActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MainCameraActions" />
        public void AddCallbacks(IMainCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_MainCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainCameraActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @LeftMouseButtonDown.started += instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.performed += instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.canceled += instance.OnLeftMouseButtonDown;
            @LeftMouseButtonUp.started += instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.performed += instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.canceled += instance.OnLeftMouseButtonUp;
            @RightMouseButtonDown.started += instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.performed += instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.canceled += instance.OnRightMouseButtonDown;
            @RightMouseButtonUp.started += instance.OnRightMouseButtonUp;
            @RightMouseButtonUp.performed += instance.OnRightMouseButtonUp;
            @RightMouseButtonUp.canceled += instance.OnRightMouseButtonUp;
            @LeftMouseButtonDoubleClick.started += instance.OnLeftMouseButtonDoubleClick;
            @LeftMouseButtonDoubleClick.performed += instance.OnLeftMouseButtonDoubleClick;
            @LeftMouseButtonDoubleClick.canceled += instance.OnLeftMouseButtonDoubleClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MainCameraActions" />
        private void UnregisterCallbacks(IMainCameraActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @LeftMouseButtonDown.started -= instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.performed -= instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.canceled -= instance.OnLeftMouseButtonDown;
            @LeftMouseButtonUp.started -= instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.performed -= instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.canceled -= instance.OnLeftMouseButtonUp;
            @RightMouseButtonDown.started -= instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.performed -= instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.canceled -= instance.OnRightMouseButtonDown;
            @RightMouseButtonUp.started -= instance.OnRightMouseButtonUp;
            @RightMouseButtonUp.performed -= instance.OnRightMouseButtonUp;
            @RightMouseButtonUp.canceled -= instance.OnRightMouseButtonUp;
            @LeftMouseButtonDoubleClick.started -= instance.OnLeftMouseButtonDoubleClick;
            @LeftMouseButtonDoubleClick.performed -= instance.OnLeftMouseButtonDoubleClick;
            @LeftMouseButtonDoubleClick.canceled -= instance.OnLeftMouseButtonDoubleClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MainCameraActions.UnregisterCallbacks(IMainCameraActions)" />.
        /// </summary>
        /// <seealso cref="MainCameraActions.UnregisterCallbacks(IMainCameraActions)" />
        public void RemoveCallbacks(IMainCameraActions instance)
        {
            if (m_Wrapper.m_MainCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MainCameraActions.AddCallbacks(IMainCameraActions)" />
        /// <seealso cref="MainCameraActions.RemoveCallbacks(IMainCameraActions)" />
        /// <seealso cref="MainCameraActions.UnregisterCallbacks(IMainCameraActions)" />
        public void SetCallbacks(IMainCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_MainCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MainCameraActions" /> instance referencing this action map.
    /// </summary>
    public MainCameraActions @MainCamera => new MainCameraActions(this);

    // MapCamera
    private readonly InputActionMap m_MapCamera;
    private List<IMapCameraActions> m_MapCameraActionsCallbackInterfaces = new List<IMapCameraActions>();
    private readonly InputAction m_MapCamera_Zoom;
    private readonly InputAction m_MapCamera_Movement;
    private readonly InputAction m_MapCamera_LeftClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "MapCamera".
    /// </summary>
    public struct MapCameraActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MapCameraActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "MapCamera/Zoom".
        /// </summary>
        public InputAction @Zoom => m_Wrapper.m_MapCamera_Zoom;
        /// <summary>
        /// Provides access to the underlying input action "MapCamera/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_MapCamera_Movement;
        /// <summary>
        /// Provides access to the underlying input action "MapCamera/LeftClick".
        /// </summary>
        public InputAction @LeftClick => m_Wrapper.m_MapCamera_LeftClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_MapCamera; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MapCameraActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MapCameraActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MapCameraActions" />
        public void AddCallbacks(IMapCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_MapCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapCameraActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MapCameraActions" />
        private void UnregisterCallbacks(IMapCameraActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MapCameraActions.UnregisterCallbacks(IMapCameraActions)" />.
        /// </summary>
        /// <seealso cref="MapCameraActions.UnregisterCallbacks(IMapCameraActions)" />
        public void RemoveCallbacks(IMapCameraActions instance)
        {
            if (m_Wrapper.m_MapCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MapCameraActions.AddCallbacks(IMapCameraActions)" />
        /// <seealso cref="MapCameraActions.RemoveCallbacks(IMapCameraActions)" />
        /// <seealso cref="MapCameraActions.UnregisterCallbacks(IMapCameraActions)" />
        public void SetCallbacks(IMapCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_MapCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MapCameraActions" /> instance referencing this action map.
    /// </summary>
    public MapCameraActions @MapCamera => new MapCameraActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private List<IBuildingActions> m_BuildingActionsCallbackInterfaces = new List<IBuildingActions>();
    private readonly InputAction m_Building_LeftMouseButtonDown;
    private readonly InputAction m_Building_LeftMouseButtonUp;
    private readonly InputAction m_Building_RightMouseButtonDown;
    private readonly InputAction m_Building_Rotate;
    private readonly InputAction m_Building_BuildingInven;
    private readonly InputAction m_Building_ShiftBuildingDown;
    private readonly InputAction m_Building_ShiftBuildingUp;
    /// <summary>
    /// Provides access to input actions defined in input action map "Building".
    /// </summary>
    public struct BuildingActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public BuildingActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Building/LeftMouseButtonDown".
        /// </summary>
        public InputAction @LeftMouseButtonDown => m_Wrapper.m_Building_LeftMouseButtonDown;
        /// <summary>
        /// Provides access to the underlying input action "Building/LeftMouseButtonUp".
        /// </summary>
        public InputAction @LeftMouseButtonUp => m_Wrapper.m_Building_LeftMouseButtonUp;
        /// <summary>
        /// Provides access to the underlying input action "Building/RightMouseButtonDown".
        /// </summary>
        public InputAction @RightMouseButtonDown => m_Wrapper.m_Building_RightMouseButtonDown;
        /// <summary>
        /// Provides access to the underlying input action "Building/Rotate".
        /// </summary>
        public InputAction @Rotate => m_Wrapper.m_Building_Rotate;
        /// <summary>
        /// Provides access to the underlying input action "Building/BuildingInven".
        /// </summary>
        public InputAction @BuildingInven => m_Wrapper.m_Building_BuildingInven;
        /// <summary>
        /// Provides access to the underlying input action "Building/ShiftBuildingDown".
        /// </summary>
        public InputAction @ShiftBuildingDown => m_Wrapper.m_Building_ShiftBuildingDown;
        /// <summary>
        /// Provides access to the underlying input action "Building/ShiftBuildingUp".
        /// </summary>
        public InputAction @ShiftBuildingUp => m_Wrapper.m_Building_ShiftBuildingUp;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="BuildingActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="BuildingActions" />
        public void AddCallbacks(IBuildingActions instance)
        {
            if (instance == null || m_Wrapper.m_BuildingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuildingActionsCallbackInterfaces.Add(instance);
            @LeftMouseButtonDown.started += instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.performed += instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.canceled += instance.OnLeftMouseButtonDown;
            @LeftMouseButtonUp.started += instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.performed += instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.canceled += instance.OnLeftMouseButtonUp;
            @RightMouseButtonDown.started += instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.performed += instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.canceled += instance.OnRightMouseButtonDown;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @BuildingInven.started += instance.OnBuildingInven;
            @BuildingInven.performed += instance.OnBuildingInven;
            @BuildingInven.canceled += instance.OnBuildingInven;
            @ShiftBuildingDown.started += instance.OnShiftBuildingDown;
            @ShiftBuildingDown.performed += instance.OnShiftBuildingDown;
            @ShiftBuildingDown.canceled += instance.OnShiftBuildingDown;
            @ShiftBuildingUp.started += instance.OnShiftBuildingUp;
            @ShiftBuildingUp.performed += instance.OnShiftBuildingUp;
            @ShiftBuildingUp.canceled += instance.OnShiftBuildingUp;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="BuildingActions" />
        private void UnregisterCallbacks(IBuildingActions instance)
        {
            @LeftMouseButtonDown.started -= instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.performed -= instance.OnLeftMouseButtonDown;
            @LeftMouseButtonDown.canceled -= instance.OnLeftMouseButtonDown;
            @LeftMouseButtonUp.started -= instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.performed -= instance.OnLeftMouseButtonUp;
            @LeftMouseButtonUp.canceled -= instance.OnLeftMouseButtonUp;
            @RightMouseButtonDown.started -= instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.performed -= instance.OnRightMouseButtonDown;
            @RightMouseButtonDown.canceled -= instance.OnRightMouseButtonDown;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @BuildingInven.started -= instance.OnBuildingInven;
            @BuildingInven.performed -= instance.OnBuildingInven;
            @BuildingInven.canceled -= instance.OnBuildingInven;
            @ShiftBuildingDown.started -= instance.OnShiftBuildingDown;
            @ShiftBuildingDown.performed -= instance.OnShiftBuildingDown;
            @ShiftBuildingDown.canceled -= instance.OnShiftBuildingDown;
            @ShiftBuildingUp.started -= instance.OnShiftBuildingUp;
            @ShiftBuildingUp.performed -= instance.OnShiftBuildingUp;
            @ShiftBuildingUp.canceled -= instance.OnShiftBuildingUp;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BuildingActions.UnregisterCallbacks(IBuildingActions)" />.
        /// </summary>
        /// <seealso cref="BuildingActions.UnregisterCallbacks(IBuildingActions)" />
        public void RemoveCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="BuildingActions.AddCallbacks(IBuildingActions)" />
        /// <seealso cref="BuildingActions.RemoveCallbacks(IBuildingActions)" />
        /// <seealso cref="BuildingActions.UnregisterCallbacks(IBuildingActions)" />
        public void SetCallbacks(IBuildingActions instance)
        {
            foreach (var item in m_Wrapper.m_BuildingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuildingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="BuildingActions" /> instance referencing this action map.
    /// </summary>
    public BuildingActions @Building => new BuildingActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Loot;
    private readonly InputAction m_Player_RightClick;
    private readonly InputAction m_Player_LeftClick;
    private readonly InputAction m_Player_Interaction;
    private readonly InputAction m_Player_TankAttack;
    private readonly InputAction m_Player_TankInven;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player".
    /// </summary>
    public struct PlayerActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        /// <summary>
        /// Provides access to the underlying input action "Player/Loot".
        /// </summary>
        public InputAction @Loot => m_Wrapper.m_Player_Loot;
        /// <summary>
        /// Provides access to the underlying input action "Player/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_Player_RightClick;
        /// <summary>
        /// Provides access to the underlying input action "Player/LeftClick".
        /// </summary>
        public InputAction @LeftClick => m_Wrapper.m_Player_LeftClick;
        /// <summary>
        /// Provides access to the underlying input action "Player/Interaction".
        /// </summary>
        public InputAction @Interaction => m_Wrapper.m_Player_Interaction;
        /// <summary>
        /// Provides access to the underlying input action "Player/TankAttack".
        /// </summary>
        public InputAction @TankAttack => m_Wrapper.m_Player_TankAttack;
        /// <summary>
        /// Provides access to the underlying input action "Player/TankInven".
        /// </summary>
        public InputAction @TankInven => m_Wrapper.m_Player_TankInven;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Loot.started += instance.OnLoot;
            @Loot.performed += instance.OnLoot;
            @Loot.canceled += instance.OnLoot;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @TankAttack.started += instance.OnTankAttack;
            @TankAttack.performed += instance.OnTankAttack;
            @TankAttack.canceled += instance.OnTankAttack;
            @TankInven.started += instance.OnTankInven;
            @TankInven.performed += instance.OnTankInven;
            @TankInven.canceled += instance.OnTankInven;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Loot.started -= instance.OnLoot;
            @Loot.performed -= instance.OnLoot;
            @Loot.canceled -= instance.OnLoot;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @TankAttack.started -= instance.OnTankAttack;
            @TankAttack.performed -= instance.OnTankAttack;
            @TankAttack.canceled -= instance.OnTankAttack;
            @TankInven.started -= instance.OnTankInven;
            @TankInven.performed -= instance.OnTankInven;
            @TankInven.canceled -= instance.OnTankInven;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerActions @Player => new PlayerActions(this);

    // Unit
    private readonly InputActionMap m_Unit;
    private List<IUnitActions> m_UnitActionsCallbackInterfaces = new List<IUnitActions>();
    private readonly InputAction m_Unit_Attack;
    private readonly InputAction m_Unit_Patrol;
    private readonly InputAction m_Unit_Hold;
    /// <summary>
    /// Provides access to input actions defined in input action map "Unit".
    /// </summary>
    public struct UnitActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UnitActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Unit/Attack".
        /// </summary>
        public InputAction @Attack => m_Wrapper.m_Unit_Attack;
        /// <summary>
        /// Provides access to the underlying input action "Unit/Patrol".
        /// </summary>
        public InputAction @Patrol => m_Wrapper.m_Unit_Patrol;
        /// <summary>
        /// Provides access to the underlying input action "Unit/Hold".
        /// </summary>
        public InputAction @Hold => m_Wrapper.m_Unit_Hold;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Unit; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UnitActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UnitActions" />
        public void AddCallbacks(IUnitActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Patrol.started += instance.OnPatrol;
            @Patrol.performed += instance.OnPatrol;
            @Patrol.canceled += instance.OnPatrol;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UnitActions" />
        private void UnregisterCallbacks(IUnitActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Patrol.started -= instance.OnPatrol;
            @Patrol.performed -= instance.OnPatrol;
            @Patrol.canceled -= instance.OnPatrol;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UnitActions.UnregisterCallbacks(IUnitActions)" />.
        /// </summary>
        /// <seealso cref="UnitActions.UnregisterCallbacks(IUnitActions)" />
        public void RemoveCallbacks(IUnitActions instance)
        {
            if (m_Wrapper.m_UnitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UnitActions.AddCallbacks(IUnitActions)" />
        /// <seealso cref="UnitActions.RemoveCallbacks(IUnitActions)" />
        /// <seealso cref="UnitActions.UnregisterCallbacks(IUnitActions)" />
        public void SetCallbacks(IUnitActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UnitActions" /> instance referencing this action map.
    /// </summary>
    public UnitActions @Unit => new UnitActions(this);

    // Structure
    private readonly InputActionMap m_Structure;
    private List<IStructureActions> m_StructureActionsCallbackInterfaces = new List<IStructureActions>();
    private readonly InputAction m_Structure_StrClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "Structure".
    /// </summary>
    public struct StructureActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public StructureActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Structure/StrClick".
        /// </summary>
        public InputAction @StrClick => m_Wrapper.m_Structure_StrClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Structure; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="StructureActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(StructureActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="StructureActions" />
        public void AddCallbacks(IStructureActions instance)
        {
            if (instance == null || m_Wrapper.m_StructureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StructureActionsCallbackInterfaces.Add(instance);
            @StrClick.started += instance.OnStrClick;
            @StrClick.performed += instance.OnStrClick;
            @StrClick.canceled += instance.OnStrClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="StructureActions" />
        private void UnregisterCallbacks(IStructureActions instance)
        {
            @StrClick.started -= instance.OnStrClick;
            @StrClick.performed -= instance.OnStrClick;
            @StrClick.canceled -= instance.OnStrClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="StructureActions.UnregisterCallbacks(IStructureActions)" />.
        /// </summary>
        /// <seealso cref="StructureActions.UnregisterCallbacks(IStructureActions)" />
        public void RemoveCallbacks(IStructureActions instance)
        {
            if (m_Wrapper.m_StructureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="StructureActions.AddCallbacks(IStructureActions)" />
        /// <seealso cref="StructureActions.RemoveCallbacks(IStructureActions)" />
        /// <seealso cref="StructureActions.UnregisterCallbacks(IStructureActions)" />
        public void SetCallbacks(IStructureActions instance)
        {
            foreach (var item in m_Wrapper.m_StructureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StructureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="StructureActions" /> instance referencing this action map.
    /// </summary>
    public StructureActions @Structure => new StructureActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_PlayerInven;
    private readonly InputAction m_Inventory_ItemSpawner;
    private readonly InputAction m_Inventory_BuildingInven;
    private readonly InputAction m_Inventory_SplitterFilter;
    private readonly InputAction m_Inventory_Recipe;
    private readonly InputAction m_Inventory_SlotLeftClick;
    private readonly InputAction m_Inventory_SlotRightClickHold;
    /// <summary>
    /// Provides access to input actions defined in input action map "Inventory".
    /// </summary>
    public struct InventoryActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public InventoryActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Inventory/PlayerInven".
        /// </summary>
        public InputAction @PlayerInven => m_Wrapper.m_Inventory_PlayerInven;
        /// <summary>
        /// Provides access to the underlying input action "Inventory/ItemSpawner".
        /// </summary>
        public InputAction @ItemSpawner => m_Wrapper.m_Inventory_ItemSpawner;
        /// <summary>
        /// Provides access to the underlying input action "Inventory/BuildingInven".
        /// </summary>
        public InputAction @BuildingInven => m_Wrapper.m_Inventory_BuildingInven;
        /// <summary>
        /// Provides access to the underlying input action "Inventory/SplitterFilter".
        /// </summary>
        public InputAction @SplitterFilter => m_Wrapper.m_Inventory_SplitterFilter;
        /// <summary>
        /// Provides access to the underlying input action "Inventory/Recipe".
        /// </summary>
        public InputAction @Recipe => m_Wrapper.m_Inventory_Recipe;
        /// <summary>
        /// Provides access to the underlying input action "Inventory/SlotLeftClick".
        /// </summary>
        public InputAction @SlotLeftClick => m_Wrapper.m_Inventory_SlotLeftClick;
        /// <summary>
        /// Provides access to the underlying input action "Inventory/SlotRightClickHold".
        /// </summary>
        public InputAction @SlotRightClickHold => m_Wrapper.m_Inventory_SlotRightClickHold;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="InventoryActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="InventoryActions" />
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @PlayerInven.started += instance.OnPlayerInven;
            @PlayerInven.performed += instance.OnPlayerInven;
            @PlayerInven.canceled += instance.OnPlayerInven;
            @ItemSpawner.started += instance.OnItemSpawner;
            @ItemSpawner.performed += instance.OnItemSpawner;
            @ItemSpawner.canceled += instance.OnItemSpawner;
            @BuildingInven.started += instance.OnBuildingInven;
            @BuildingInven.performed += instance.OnBuildingInven;
            @BuildingInven.canceled += instance.OnBuildingInven;
            @SplitterFilter.started += instance.OnSplitterFilter;
            @SplitterFilter.performed += instance.OnSplitterFilter;
            @SplitterFilter.canceled += instance.OnSplitterFilter;
            @Recipe.started += instance.OnRecipe;
            @Recipe.performed += instance.OnRecipe;
            @Recipe.canceled += instance.OnRecipe;
            @SlotLeftClick.started += instance.OnSlotLeftClick;
            @SlotLeftClick.performed += instance.OnSlotLeftClick;
            @SlotLeftClick.canceled += instance.OnSlotLeftClick;
            @SlotRightClickHold.started += instance.OnSlotRightClickHold;
            @SlotRightClickHold.performed += instance.OnSlotRightClickHold;
            @SlotRightClickHold.canceled += instance.OnSlotRightClickHold;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="InventoryActions" />
        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @PlayerInven.started -= instance.OnPlayerInven;
            @PlayerInven.performed -= instance.OnPlayerInven;
            @PlayerInven.canceled -= instance.OnPlayerInven;
            @ItemSpawner.started -= instance.OnItemSpawner;
            @ItemSpawner.performed -= instance.OnItemSpawner;
            @ItemSpawner.canceled -= instance.OnItemSpawner;
            @BuildingInven.started -= instance.OnBuildingInven;
            @BuildingInven.performed -= instance.OnBuildingInven;
            @BuildingInven.canceled -= instance.OnBuildingInven;
            @SplitterFilter.started -= instance.OnSplitterFilter;
            @SplitterFilter.performed -= instance.OnSplitterFilter;
            @SplitterFilter.canceled -= instance.OnSplitterFilter;
            @Recipe.started -= instance.OnRecipe;
            @Recipe.performed -= instance.OnRecipe;
            @Recipe.canceled -= instance.OnRecipe;
            @SlotLeftClick.started -= instance.OnSlotLeftClick;
            @SlotLeftClick.performed -= instance.OnSlotLeftClick;
            @SlotLeftClick.canceled -= instance.OnSlotLeftClick;
            @SlotRightClickHold.started -= instance.OnSlotRightClickHold;
            @SlotRightClickHold.performed -= instance.OnSlotRightClickHold;
            @SlotRightClickHold.canceled -= instance.OnSlotRightClickHold;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />.
        /// </summary>
        /// <seealso cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />
        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="InventoryActions.AddCallbacks(IInventoryActions)" />
        /// <seealso cref="InventoryActions.RemoveCallbacks(IInventoryActions)" />
        /// <seealso cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />
        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="InventoryActions" /> instance referencing this action map.
    /// </summary>
    public InventoryActions @Inventory => new InventoryActions(this);

    // HotKey
    private readonly InputActionMap m_HotKey;
    private List<IHotKeyActions> m_HotKeyActionsCallbackInterfaces = new List<IHotKeyActions>();
    private readonly InputAction m_HotKey_Debug;
    private readonly InputAction m_HotKey_Supply;
    private readonly InputAction m_HotKey_Escape;
    private readonly InputAction m_HotKey_ScienceTree;
    private readonly InputAction m_HotKey_EnergyCheck;
    private readonly InputAction m_HotKey_Overall;
    private readonly InputAction m_HotKey_GameStop;
    private readonly InputAction m_HotKey_BasicUIBtnsSwap;
    private readonly InputAction m_HotKey_UIClose;
    private readonly InputAction m_HotKey_InfoDictionary;
    private readonly InputAction m_HotKey_TimeUIUp;
    private readonly InputAction m_HotKey_TimeUIDown;
    private readonly InputAction m_HotKey_Enter;
    private readonly InputAction m_HotKey_FactoryOverlay;
    /// <summary>
    /// Provides access to input actions defined in input action map "HotKey".
    /// </summary>
    public struct HotKeyActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public HotKeyActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "HotKey/Debug".
        /// </summary>
        public InputAction @Debug => m_Wrapper.m_HotKey_Debug;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/Supply".
        /// </summary>
        public InputAction @Supply => m_Wrapper.m_HotKey_Supply;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/Escape".
        /// </summary>
        public InputAction @Escape => m_Wrapper.m_HotKey_Escape;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/ScienceTree".
        /// </summary>
        public InputAction @ScienceTree => m_Wrapper.m_HotKey_ScienceTree;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/EnergyCheck".
        /// </summary>
        public InputAction @EnergyCheck => m_Wrapper.m_HotKey_EnergyCheck;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/Overall".
        /// </summary>
        public InputAction @Overall => m_Wrapper.m_HotKey_Overall;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/GameStop".
        /// </summary>
        public InputAction @GameStop => m_Wrapper.m_HotKey_GameStop;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/BasicUIBtnsSwap".
        /// </summary>
        public InputAction @BasicUIBtnsSwap => m_Wrapper.m_HotKey_BasicUIBtnsSwap;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/UIClose".
        /// </summary>
        public InputAction @UIClose => m_Wrapper.m_HotKey_UIClose;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/InfoDictionary".
        /// </summary>
        public InputAction @InfoDictionary => m_Wrapper.m_HotKey_InfoDictionary;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/TimeUIUp".
        /// </summary>
        public InputAction @TimeUIUp => m_Wrapper.m_HotKey_TimeUIUp;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/TimeUIDown".
        /// </summary>
        public InputAction @TimeUIDown => m_Wrapper.m_HotKey_TimeUIDown;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/Enter".
        /// </summary>
        public InputAction @Enter => m_Wrapper.m_HotKey_Enter;
        /// <summary>
        /// Provides access to the underlying input action "HotKey/FactoryOverlay".
        /// </summary>
        public InputAction @FactoryOverlay => m_Wrapper.m_HotKey_FactoryOverlay;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_HotKey; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="HotKeyActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(HotKeyActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="HotKeyActions" />
        public void AddCallbacks(IHotKeyActions instance)
        {
            if (instance == null || m_Wrapper.m_HotKeyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HotKeyActionsCallbackInterfaces.Add(instance);
            @Debug.started += instance.OnDebug;
            @Debug.performed += instance.OnDebug;
            @Debug.canceled += instance.OnDebug;
            @Supply.started += instance.OnSupply;
            @Supply.performed += instance.OnSupply;
            @Supply.canceled += instance.OnSupply;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @ScienceTree.started += instance.OnScienceTree;
            @ScienceTree.performed += instance.OnScienceTree;
            @ScienceTree.canceled += instance.OnScienceTree;
            @EnergyCheck.started += instance.OnEnergyCheck;
            @EnergyCheck.performed += instance.OnEnergyCheck;
            @EnergyCheck.canceled += instance.OnEnergyCheck;
            @Overall.started += instance.OnOverall;
            @Overall.performed += instance.OnOverall;
            @Overall.canceled += instance.OnOverall;
            @GameStop.started += instance.OnGameStop;
            @GameStop.performed += instance.OnGameStop;
            @GameStop.canceled += instance.OnGameStop;
            @BasicUIBtnsSwap.started += instance.OnBasicUIBtnsSwap;
            @BasicUIBtnsSwap.performed += instance.OnBasicUIBtnsSwap;
            @BasicUIBtnsSwap.canceled += instance.OnBasicUIBtnsSwap;
            @UIClose.started += instance.OnUIClose;
            @UIClose.performed += instance.OnUIClose;
            @UIClose.canceled += instance.OnUIClose;
            @InfoDictionary.started += instance.OnInfoDictionary;
            @InfoDictionary.performed += instance.OnInfoDictionary;
            @InfoDictionary.canceled += instance.OnInfoDictionary;
            @TimeUIUp.started += instance.OnTimeUIUp;
            @TimeUIUp.performed += instance.OnTimeUIUp;
            @TimeUIUp.canceled += instance.OnTimeUIUp;
            @TimeUIDown.started += instance.OnTimeUIDown;
            @TimeUIDown.performed += instance.OnTimeUIDown;
            @TimeUIDown.canceled += instance.OnTimeUIDown;
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
            @FactoryOverlay.started += instance.OnFactoryOverlay;
            @FactoryOverlay.performed += instance.OnFactoryOverlay;
            @FactoryOverlay.canceled += instance.OnFactoryOverlay;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="HotKeyActions" />
        private void UnregisterCallbacks(IHotKeyActions instance)
        {
            @Debug.started -= instance.OnDebug;
            @Debug.performed -= instance.OnDebug;
            @Debug.canceled -= instance.OnDebug;
            @Supply.started -= instance.OnSupply;
            @Supply.performed -= instance.OnSupply;
            @Supply.canceled -= instance.OnSupply;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @ScienceTree.started -= instance.OnScienceTree;
            @ScienceTree.performed -= instance.OnScienceTree;
            @ScienceTree.canceled -= instance.OnScienceTree;
            @EnergyCheck.started -= instance.OnEnergyCheck;
            @EnergyCheck.performed -= instance.OnEnergyCheck;
            @EnergyCheck.canceled -= instance.OnEnergyCheck;
            @Overall.started -= instance.OnOverall;
            @Overall.performed -= instance.OnOverall;
            @Overall.canceled -= instance.OnOverall;
            @GameStop.started -= instance.OnGameStop;
            @GameStop.performed -= instance.OnGameStop;
            @GameStop.canceled -= instance.OnGameStop;
            @BasicUIBtnsSwap.started -= instance.OnBasicUIBtnsSwap;
            @BasicUIBtnsSwap.performed -= instance.OnBasicUIBtnsSwap;
            @BasicUIBtnsSwap.canceled -= instance.OnBasicUIBtnsSwap;
            @UIClose.started -= instance.OnUIClose;
            @UIClose.performed -= instance.OnUIClose;
            @UIClose.canceled -= instance.OnUIClose;
            @InfoDictionary.started -= instance.OnInfoDictionary;
            @InfoDictionary.performed -= instance.OnInfoDictionary;
            @InfoDictionary.canceled -= instance.OnInfoDictionary;
            @TimeUIUp.started -= instance.OnTimeUIUp;
            @TimeUIUp.performed -= instance.OnTimeUIUp;
            @TimeUIUp.canceled -= instance.OnTimeUIUp;
            @TimeUIDown.started -= instance.OnTimeUIDown;
            @TimeUIDown.performed -= instance.OnTimeUIDown;
            @TimeUIDown.canceled -= instance.OnTimeUIDown;
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
            @FactoryOverlay.started -= instance.OnFactoryOverlay;
            @FactoryOverlay.performed -= instance.OnFactoryOverlay;
            @FactoryOverlay.canceled -= instance.OnFactoryOverlay;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HotKeyActions.UnregisterCallbacks(IHotKeyActions)" />.
        /// </summary>
        /// <seealso cref="HotKeyActions.UnregisterCallbacks(IHotKeyActions)" />
        public void RemoveCallbacks(IHotKeyActions instance)
        {
            if (m_Wrapper.m_HotKeyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="HotKeyActions.AddCallbacks(IHotKeyActions)" />
        /// <seealso cref="HotKeyActions.RemoveCallbacks(IHotKeyActions)" />
        /// <seealso cref="HotKeyActions.UnregisterCallbacks(IHotKeyActions)" />
        public void SetCallbacks(IHotKeyActions instance)
        {
            foreach (var item in m_Wrapper.m_HotKeyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HotKeyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="HotKeyActions" /> instance referencing this action map.
    /// </summary>
    public HotKeyActions @HotKey => new HotKeyActions(this);

    // Hold
    private readonly InputActionMap m_Hold;
    private List<IHoldActions> m_HoldActionsCallbackInterfaces = new List<IHoldActions>();
    private readonly InputAction m_Hold_Ctrl;
    private readonly InputAction m_Hold_Shift;
    private readonly InputAction m_Hold_Alt;
    private readonly InputAction m_Hold_MouseLeft;
    private readonly InputAction m_Hold_MouseRight;
    /// <summary>
    /// Provides access to input actions defined in input action map "Hold".
    /// </summary>
    public struct HoldActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public HoldActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Hold/Ctrl".
        /// </summary>
        public InputAction @Ctrl => m_Wrapper.m_Hold_Ctrl;
        /// <summary>
        /// Provides access to the underlying input action "Hold/Shift".
        /// </summary>
        public InputAction @Shift => m_Wrapper.m_Hold_Shift;
        /// <summary>
        /// Provides access to the underlying input action "Hold/Alt".
        /// </summary>
        public InputAction @Alt => m_Wrapper.m_Hold_Alt;
        /// <summary>
        /// Provides access to the underlying input action "Hold/MouseLeft".
        /// </summary>
        public InputAction @MouseLeft => m_Wrapper.m_Hold_MouseLeft;
        /// <summary>
        /// Provides access to the underlying input action "Hold/MouseRight".
        /// </summary>
        public InputAction @MouseRight => m_Wrapper.m_Hold_MouseRight;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Hold; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="HoldActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(HoldActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="HoldActions" />
        public void AddCallbacks(IHoldActions instance)
        {
            if (instance == null || m_Wrapper.m_HoldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HoldActionsCallbackInterfaces.Add(instance);
            @Ctrl.started += instance.OnCtrl;
            @Ctrl.performed += instance.OnCtrl;
            @Ctrl.canceled += instance.OnCtrl;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @Alt.started += instance.OnAlt;
            @Alt.performed += instance.OnAlt;
            @Alt.canceled += instance.OnAlt;
            @MouseLeft.started += instance.OnMouseLeft;
            @MouseLeft.performed += instance.OnMouseLeft;
            @MouseLeft.canceled += instance.OnMouseLeft;
            @MouseRight.started += instance.OnMouseRight;
            @MouseRight.performed += instance.OnMouseRight;
            @MouseRight.canceled += instance.OnMouseRight;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="HoldActions" />
        private void UnregisterCallbacks(IHoldActions instance)
        {
            @Ctrl.started -= instance.OnCtrl;
            @Ctrl.performed -= instance.OnCtrl;
            @Ctrl.canceled -= instance.OnCtrl;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @Alt.started -= instance.OnAlt;
            @Alt.performed -= instance.OnAlt;
            @Alt.canceled -= instance.OnAlt;
            @MouseLeft.started -= instance.OnMouseLeft;
            @MouseLeft.performed -= instance.OnMouseLeft;
            @MouseLeft.canceled -= instance.OnMouseLeft;
            @MouseRight.started -= instance.OnMouseRight;
            @MouseRight.performed -= instance.OnMouseRight;
            @MouseRight.canceled -= instance.OnMouseRight;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HoldActions.UnregisterCallbacks(IHoldActions)" />.
        /// </summary>
        /// <seealso cref="HoldActions.UnregisterCallbacks(IHoldActions)" />
        public void RemoveCallbacks(IHoldActions instance)
        {
            if (m_Wrapper.m_HoldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="HoldActions.AddCallbacks(IHoldActions)" />
        /// <seealso cref="HoldActions.RemoveCallbacks(IHoldActions)" />
        /// <seealso cref="HoldActions.UnregisterCallbacks(IHoldActions)" />
        public void SetCallbacks(IHoldActions instance)
        {
            foreach (var item in m_Wrapper.m_HoldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HoldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="HoldActions" /> instance referencing this action map.
    /// </summary>
    public HoldActions @Hold => new HoldActions(this);

    // Chat
    private readonly InputActionMap m_Chat;
    private List<IChatActions> m_ChatActionsCallbackInterfaces = new List<IChatActions>();
    private readonly InputAction m_Chat_Enter;
    /// <summary>
    /// Provides access to input actions defined in input action map "Chat".
    /// </summary>
    public struct ChatActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ChatActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Chat/Enter".
        /// </summary>
        public InputAction @Enter => m_Wrapper.m_Chat_Enter;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Chat; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ChatActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ChatActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ChatActions" />
        public void AddCallbacks(IChatActions instance)
        {
            if (instance == null || m_Wrapper.m_ChatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChatActionsCallbackInterfaces.Add(instance);
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ChatActions" />
        private void UnregisterCallbacks(IChatActions instance)
        {
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ChatActions.UnregisterCallbacks(IChatActions)" />.
        /// </summary>
        /// <seealso cref="ChatActions.UnregisterCallbacks(IChatActions)" />
        public void RemoveCallbacks(IChatActions instance)
        {
            if (m_Wrapper.m_ChatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ChatActions.AddCallbacks(IChatActions)" />
        /// <seealso cref="ChatActions.RemoveCallbacks(IChatActions)" />
        /// <seealso cref="ChatActions.UnregisterCallbacks(IChatActions)" />
        public void SetCallbacks(IChatActions instance)
        {
            foreach (var item in m_Wrapper.m_ChatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ChatActions" /> instance referencing this action map.
    /// </summary>
    public ChatActions @Chat => new ChatActions(this);

    // State
    private readonly InputActionMap m_State;
    private List<IStateActions> m_StateActionsCallbackInterfaces = new List<IStateActions>();
    private readonly InputAction m_State_ToggleMap;
    /// <summary>
    /// Provides access to input actions defined in input action map "State".
    /// </summary>
    public struct StateActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public StateActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "State/ToggleMap".
        /// </summary>
        public InputAction @ToggleMap => m_Wrapper.m_State_ToggleMap;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_State; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="StateActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(StateActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="StateActions" />
        public void AddCallbacks(IStateActions instance)
        {
            if (instance == null || m_Wrapper.m_StateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StateActionsCallbackInterfaces.Add(instance);
            @ToggleMap.started += instance.OnToggleMap;
            @ToggleMap.performed += instance.OnToggleMap;
            @ToggleMap.canceled += instance.OnToggleMap;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="StateActions" />
        private void UnregisterCallbacks(IStateActions instance)
        {
            @ToggleMap.started -= instance.OnToggleMap;
            @ToggleMap.performed -= instance.OnToggleMap;
            @ToggleMap.canceled -= instance.OnToggleMap;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="StateActions.UnregisterCallbacks(IStateActions)" />.
        /// </summary>
        /// <seealso cref="StateActions.UnregisterCallbacks(IStateActions)" />
        public void RemoveCallbacks(IStateActions instance)
        {
            if (m_Wrapper.m_StateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="StateActions.AddCallbacks(IStateActions)" />
        /// <seealso cref="StateActions.RemoveCallbacks(IStateActions)" />
        /// <seealso cref="StateActions.UnregisterCallbacks(IStateActions)" />
        public void SetCallbacks(IStateActions instance)
        {
            foreach (var item in m_Wrapper.m_StateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="StateActions" /> instance referencing this action map.
    /// </summary>
    public StateActions @State => new StateActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_TrackedDeviceOrientation;
    private readonly InputAction m_UI_TrackedDevicePosition;
    private readonly InputAction m_UI_RightClick;
    private readonly InputAction m_UI_MiddleClick;
    private readonly InputAction m_UI_ScrollWheel;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Submit;
    private readonly InputAction m_UI_Navigate;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI".
    /// </summary>
    public struct UIActions
    {
        private @InputControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI/TrackedDeviceOrientation".
        /// </summary>
        public InputAction @TrackedDeviceOrientation => m_Wrapper.m_UI_TrackedDeviceOrientation;
        /// <summary>
        /// Provides access to the underlying input action "UI/TrackedDevicePosition".
        /// </summary>
        public InputAction @TrackedDevicePosition => m_Wrapper.m_UI_TrackedDevicePosition;
        /// <summary>
        /// Provides access to the underlying input action "UI/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
        /// <summary>
        /// Provides access to the underlying input action "UI/MiddleClick".
        /// </summary>
        public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
        /// <summary>
        /// Provides access to the underlying input action "UI/ScrollWheel".
        /// </summary>
        public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
        /// <summary>
        /// Provides access to the underlying input action "UI/Click".
        /// </summary>
        public InputAction @Click => m_Wrapper.m_UI_Click;
        /// <summary>
        /// Provides access to the underlying input action "UI/Point".
        /// </summary>
        public InputAction @Point => m_Wrapper.m_UI_Point;
        /// <summary>
        /// Provides access to the underlying input action "UI/Cancel".
        /// </summary>
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        /// <summary>
        /// Provides access to the underlying input action "UI/Submit".
        /// </summary>
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        /// <summary>
        /// Provides access to the underlying input action "UI/Navigate".
        /// </summary>
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIActions" />
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
            @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
            @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
            @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
            @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
            @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @MiddleClick.started += instance.OnMiddleClick;
            @MiddleClick.performed += instance.OnMiddleClick;
            @MiddleClick.canceled += instance.OnMiddleClick;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIActions" />
        private void UnregisterCallbacks(IUIActions instance)
        {
            @TrackedDeviceOrientation.started -= instance.OnTrackedDeviceOrientation;
            @TrackedDeviceOrientation.performed -= instance.OnTrackedDeviceOrientation;
            @TrackedDeviceOrientation.canceled -= instance.OnTrackedDeviceOrientation;
            @TrackedDevicePosition.started -= instance.OnTrackedDevicePosition;
            @TrackedDevicePosition.performed -= instance.OnTrackedDevicePosition;
            @TrackedDevicePosition.canceled -= instance.OnTrackedDevicePosition;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @MiddleClick.started -= instance.OnMiddleClick;
            @MiddleClick.performed -= instance.OnMiddleClick;
            @MiddleClick.canceled -= instance.OnMiddleClick;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIActions.UnregisterCallbacks(IUIActions)" />.
        /// </summary>
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIActions" /> instance referencing this action map.
    /// </summary>
    public UIActions @UI => new UIActions(this);
    private int m_PCSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "MainCamera" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MainCameraActions.AddCallbacks(IMainCameraActions)" />
    /// <seealso cref="MainCameraActions.RemoveCallbacks(IMainCameraActions)" />
    public interface IMainCameraActions
    {
        /// <summary>
        /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnZoom(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftMouseButtonDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftMouseButtonDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftMouseButtonUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftMouseButtonUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightMouseButtonDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightMouseButtonDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightMouseButtonUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightMouseButtonUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftMouseButtonDoubleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftMouseButtonDoubleClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "MapCamera" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MapCameraActions.AddCallbacks(IMapCameraActions)" />
    /// <seealso cref="MapCameraActions.RemoveCallbacks(IMapCameraActions)" />
    public interface IMapCameraActions
    {
        /// <summary>
        /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnZoom(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Building" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="BuildingActions.AddCallbacks(IBuildingActions)" />
    /// <seealso cref="BuildingActions.RemoveCallbacks(IBuildingActions)" />
    public interface IBuildingActions
    {
        /// <summary>
        /// Method invoked when associated input action "LeftMouseButtonDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftMouseButtonDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftMouseButtonUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftMouseButtonUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightMouseButtonDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightMouseButtonDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BuildingInven" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBuildingInven(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ShiftBuildingDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShiftBuildingDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ShiftBuildingUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShiftBuildingUp(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
    /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
    public interface IPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Loot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLoot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interaction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteraction(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TankAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTankAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TankInven" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTankInven(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Unit" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UnitActions.AddCallbacks(IUnitActions)" />
    /// <seealso cref="UnitActions.RemoveCallbacks(IUnitActions)" />
    public interface IUnitActions
    {
        /// <summary>
        /// Method invoked when associated input action "Attack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Patrol" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPatrol(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHold(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Structure" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="StructureActions.AddCallbacks(IStructureActions)" />
    /// <seealso cref="StructureActions.RemoveCallbacks(IStructureActions)" />
    public interface IStructureActions
    {
        /// <summary>
        /// Method invoked when associated input action "StrClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStrClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Inventory" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="InventoryActions.AddCallbacks(IInventoryActions)" />
    /// <seealso cref="InventoryActions.RemoveCallbacks(IInventoryActions)" />
    public interface IInventoryActions
    {
        /// <summary>
        /// Method invoked when associated input action "PlayerInven" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayerInven(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ItemSpawner" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnItemSpawner(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BuildingInven" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBuildingInven(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SplitterFilter" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSplitterFilter(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Recipe" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRecipe(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SlotLeftClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSlotLeftClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SlotRightClickHold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSlotRightClickHold(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "HotKey" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="HotKeyActions.AddCallbacks(IHotKeyActions)" />
    /// <seealso cref="HotKeyActions.RemoveCallbacks(IHotKeyActions)" />
    public interface IHotKeyActions
    {
        /// <summary>
        /// Method invoked when associated input action "Debug" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDebug(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Supply" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSupply(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Escape" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEscape(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScienceTree" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScienceTree(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EnergyCheck" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEnergyCheck(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Overall" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOverall(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GameStop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGameStop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BasicUIBtnsSwap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBasicUIBtnsSwap(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UIClose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIClose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "InfoDictionary" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInfoDictionary(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TimeUIUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTimeUIUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TimeUIDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTimeUIDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Enter" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEnter(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FactoryOverlay" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFactoryOverlay(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Hold" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="HoldActions.AddCallbacks(IHoldActions)" />
    /// <seealso cref="HoldActions.RemoveCallbacks(IHoldActions)" />
    public interface IHoldActions
    {
        /// <summary>
        /// Method invoked when associated input action "Ctrl" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCtrl(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shift" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShift(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Alt" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAlt(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MouseLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MouseRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseRight(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Chat" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ChatActions.AddCallbacks(IChatActions)" />
    /// <seealso cref="ChatActions.RemoveCallbacks(IChatActions)" />
    public interface IChatActions
    {
        /// <summary>
        /// Method invoked when associated input action "Enter" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEnter(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "State" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="StateActions.AddCallbacks(IStateActions)" />
    /// <seealso cref="StateActions.RemoveCallbacks(IStateActions)" />
    public interface IStateActions
    {
        /// <summary>
        /// Method invoked when associated input action "ToggleMap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleMap(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
    /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
    public interface IUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "TrackedDeviceOrientation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TrackedDevicePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackedDevicePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MiddleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMiddleClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScrollWheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScrollWheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Point" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPoint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Submit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSubmit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Navigate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNavigate(InputAction.CallbackContext context);
    }
}
